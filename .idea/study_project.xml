<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="16" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <HyperskillCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="Web services are useful to share information almost instantly. You publish a resume, and in five minutes an employer is inviting you to the interview. Moreover, there are many employees and employers are meeting each other at the same place. With the help of Django, you'll create this application for the HyperJob agency.&lt;br/&gt;&lt;br/&gt;Learn more at &lt;a href=&quot;https://hyperskill.org&quot;&gt;https://hyperskill.org/projects/94&lt;/a&gt;" />
          <option name="environment" value="" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="Python" />
          <option name="languageCode" value="en" />
          <option name="name" value="HyperJob Agency" />
          <option name="stages">
            <list>
              <HyperskillStage>
                <option name="id" value="519" />
                <option name="stepId" value="8598" />
                <option name="title" value="Creating models" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="520" />
                <option name="stepId" value="8599" />
                <option name="title" value="Main menu" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="521" />
                <option name="stepId" value="8600" />
                <option name="title" value="Vacancies and resumes pages" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="522" />
                <option name="stepId" value="8601" />
                <option name="title" value="Authentication" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="523" />
                <option name="stepId" value="8602" />
                <option name="title" value="Creating new vacancies and resumes" />
              </HyperskillStage>
            </list>
          </option>
          <option name="taskToTopics">
            <map>
              <entry key="0">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="117" />
                      <option name="theoryId" value="3614" />
                      <option name="title" value="Introduction to OOP" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="887" />
                      <option name="theoryId" value="9844" />
                      <option name="title" value="Inheritance" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="157" />
                      <option name="theoryId" value="3611" />
                      <option name="title" value="The concept of patterns" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="493" />
                      <option name="theoryId" value="6701" />
                      <option name="title" value="Frameworks" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="652" />
                      <option name="theoryId" value="8262" />
                      <option name="title" value="Data and object mapping" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="519" />
                      <option name="theoryId" value="7054" />
                      <option name="title" value="What is SQL" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="656" />
                      <option name="theoryId" value="8312" />
                      <option name="title" value="Object-Relational Mapping(ORM)" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="708" />
                      <option name="theoryId" value="8739" />
                      <option name="title" value="Computer programming" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="709" />
                      <option name="theoryId" value="8742" />
                      <option name="title" value="Intro to computational thinking" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="711" />
                      <option name="theoryId" value="8745" />
                      <option name="title" value="Components of computational thinking" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="259" />
                      <option name="theoryId" value="3805" />
                      <option name="title" value="IDE" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="333" />
                      <option name="theoryId" value="5204" />
                      <option name="title" value="Introduction to Python" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="336" />
                      <option name="theoryId" value="5208" />
                      <option name="title" value="Overview of the basic program" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="335" />
                      <option name="theoryId" value="5233" />
                      <option name="title" value="Multi-line programs" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="402" />
                      <option name="theoryId" value="5879" />
                      <option name="title" value="PEP 8" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="403" />
                      <option name="theoryId" value="6081" />
                      <option name="title" value="Comments" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="394" />
                      <option name="theoryId" value="5852" />
                      <option name="title" value="Basic data types" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="393" />
                      <option name="theoryId" value="5814" />
                      <option name="title" value="Quotes and multi-line strings" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="396" />
                      <option name="theoryId" value="5859" />
                      <option name="title" value="Variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="398" />
                      <option name="theoryId" value="5865" />
                      <option name="title" value="Integer arithmetic" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="1">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="910" />
                      <option name="theoryId" value="10027" />
                      <option name="title" value="Polymorphism" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="348" />
                      <option name="theoryId" value="5504" />
                      <option name="title" value="Bugs and debugging" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="485" />
                      <option name="theoryId" value="6633" />
                      <option name="title" value="World Wide Web" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="479" />
                      <option name="theoryId" value="6569" />
                      <option name="title" value="HyperText Transfer Protocol" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="494" />
                      <option name="theoryId" value="6740" />
                      <option name="title" value="HTTP URL" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="495" />
                      <option name="theoryId" value="6752" />
                      <option name="title" value="HTTP messages" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="577" />
                      <option name="theoryId" value="7580" />
                      <option name="title" value="Regexps basics" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="529" />
                      <option name="theoryId" value="7130" />
                      <option name="title" value="Escape sequences" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="435" />
                      <option name="theoryId" value="6189" />
                      <option name="title" value="Indexes" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="475" />
                      <option name="theoryId" value="6481" />
                      <option name="title" value="Dictionary" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="564" />
                      <option name="theoryId" value="7462" />
                      <option name="title" value="Tuple" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="534" />
                      <option name="theoryId" value="7248" />
                      <option name="title" value="Arguments" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="418" />
                      <option name="theoryId" value="6047" />
                      <option name="title" value="Program execution" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="419" />
                      <option name="theoryId" value="6052" />
                      <option name="title" value="Errors" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="420" />
                      <option name="theoryId" value="6042" />
                      <option name="title" value="Exceptions" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="501" />
                      <option name="theoryId" value="6842" />
                      <option name="title" value="Basic string methods" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="429" />
                      <option name="theoryId" value="6065" />
                      <option name="title" value="For loop" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="685" />
                      <option name="theoryId" value="8560" />
                      <option name="title" value="Args" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="751" />
                      <option name="theoryId" value="9008" />
                      <option name="title" value="Operations with dictionary" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="853" />
                      <option name="theoryId" value="9544" />
                      <option name="title" value="Kwargs" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="2">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="740" />
                      <option name="theoryId" value="8956" />
                      <option name="title" value="Design principles" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="409" />
                      <option name="theoryId" value="5940" />
                      <option name="title" value="While loop" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="449" />
                      <option name="theoryId" value="6270" />
                      <option name="title" value="Exception handling" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="514" />
                      <option name="theoryId" value="7005" />
                      <option name="title" value="Queries and filters" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="543" />
                      <option name="theoryId" value="7637" />
                      <option name="title" value="Using models with templates" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="539" />
                      <option name="theoryId" value="7271" />
                      <option name="title" value="Block-level elements" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="552" />
                      <option name="theoryId" value="7527" />
                      <option name="title" value="HTML attributes id and class" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="478" />
                      <option name="theoryId" value="6560" />
                      <option name="title" value="HTML forms" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="553" />
                      <option name="theoryId" value="7493" />
                      <option name="title" value="Audio" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="3">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="506" />
                      <option name="theoryId" value="6911" />
                      <option name="title" value="Domains" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="544" />
                      <option name="theoryId" value="7332" />
                      <option name="title" value="Submitting data" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="568" />
                      <option name="theoryId" value="7647" />
                      <option name="title" value="Forms and validation" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="586" />
                      <option name="theoryId" value="7752" />
                      <option name="title" value="Registration and authentication" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="904" />
                      <option name="theoryId" value="9998" />
                      <option name="title" value="Template tags" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="4">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="522" />
                      <option name="theoryId" value="7101" />
                      <option name="title" value="Object modification with ORM" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
            </map>
          </option>
          <option name="updateDate" value="0" />
          <option name="hyperskillProject">
            <HyperskillProject>
              <option name="description" value="Web services are useful to share information almost instantly. You publish a resume, and in five minutes an employer is inviting you to the interview. Moreover, there are many employees and employers are meeting each other at the same place. With the help of Django, you'll create this application for the HyperJob agency." />
              <option name="id" value="94" />
              <option name="ideFiles" value="https://stepik.org/media/attachments/lesson/303588/additional_files.json" />
              <option name="language" value="python" />
              <option name="templateBased" value="false" />
              <option name="title" value="HyperJob Agency" />
              <option name="useIde" value="true" />
            </HyperskillProject>
          </option>
          <option name="items">
            <list>
              <FrameworkLesson>
                <option name="currentTaskIndex" value="4" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="HyperJob Agency" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" value="stage1" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;The &quot;&lt;em&gt;HyperJob&lt;/em&gt;&quot; recruitment agency is a very conservative one. Its history starts on January 1st, 1970 . The managers in the agency prefer communicating by phone or email and searching for employees personally. That was an efficient strategy some ten years ago, but now the candidates prefer to apply for jobs online. The problem is that &quot;&lt;em&gt;HyperJob&lt;/em&gt;&quot; still doesn't have a site, so they need you to create the service as soon as possible.&lt;/p&gt;&#10;&#10;&lt;p&gt;We start with a simple site that will be suitable for:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;&#9;&lt;li&gt;Creating a new vacancy by the agency's manager&lt;/li&gt;&#10;&#9;&lt;li&gt;Creating a new resume by a candidate&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;We know that it will be a long road, so at each stage you will make only a small part of work. By the end, we'll have a working site that fulfills all the requirements.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;Your first task is to prepare the models for the data. It's important to keep all the data safe. We need to store all the vacancies and resumes persistently in the database. Create models to manage the database tables.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;div class=&quot;alert alert-primary&quot;&gt; Use the default settings of the project with a predefined &lt;em&gt;SQLite&lt;/em&gt; database. &lt;/div&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Throughout the project, we will need at least two models: &lt;code class=&quot;java&quot;&gt;Vacancy&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;Resume&lt;/code&gt;. Both of them should have the &lt;code class=&quot;java&quot;&gt;description&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;author&lt;/code&gt; fields. The &lt;code class=&quot;java&quot;&gt;description&lt;/code&gt; is a text field with no more than 1024 symbols, and the &lt;code class=&quot;java&quot;&gt;author&lt;/code&gt; is a foreign key to &lt;code class=&quot;java&quot;&gt;django.contrib.auth.models.User&lt;/code&gt; model.&lt;/p&gt;&#10;&#10;&lt;p&gt;Define &lt;code class=&quot;java&quot;&gt;Vacancy&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;Resume&lt;/code&gt; in &lt;em&gt;models.py &lt;/em&gt;module and migrate them to the database. We check your work this time, so that at the next steps you are confident enough to add new models by yourself.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/94/stages/519/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8598" />
                      <option name="index" value="1" />
                      <option name="name" value="Creating models" />
                      <option name="record" value="1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from hstest.test_case import TestCase&#10;&#10;from base import HyperJobTest&#10;&#10;&#10;class HyperJobTestRunner(HyperJobTest):&#10;    def generate(self):&#10;        return [&#10;            # 1 task&#10;            TestCase(attach=self.check_server),&#10;            TestCase(attach=self.check_create_vacancies),&#10;            TestCase(attach=self.check_create_resumes),&#10;        ]&#10;&#10;    def check(self, reply, attach):&#10;        return attach()&#10;&#10;&#10;if __name__ == '__main__':&#10;    import os&#10;    os.environ['HYPERSKILL_TESTS_WITH_SQLITE3'] = '1'&#10;    HyperJobTestRunner('hyperjob.manage').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/check_result.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/check_result.py" />
                                <option name="text" value="class CheckResult:&#10;&#10;    def __init__(self, result: bool, feedback: str):&#10;        self.result = result&#10;        self.feedback = feedback&#10;&#10;    @staticmethod&#10;    def true():&#10;        return CheckResult(True, '')&#10;&#10;    @staticmethod&#10;    def false(feedback: str = ''):&#10;        return CheckResult(False, feedback)&#10;&#10;&#10;def wrong(feedback: str = '') -&gt; CheckResult:&#10;    return CheckResult.false(feedback)&#10;&#10;&#10;def accept():&#10;    return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/django_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/django_test.py" />
                                <option name="text" value="import os&#10;import shutil&#10;import signal&#10;import subprocess&#10;import sys&#10;from time import sleep&#10;from urllib.error import URLError, HTTPError&#10;from urllib.request import urlopen&#10;from hstest.stage_test import StageTest&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import UnexpectedErrorException&#10;&#10;&#10;EMPTY_DATABASE = 'empty.sqlite3'&#10;TEST_DATABASE = 'db.test.sqlite3'&#10;&#10;&#10;class DjangoTest(StageTest):&#10;    _kill = os.kill&#10;    port = '0'&#10;    tryout_ports = ['8000', '8001', '8002', '8003', '8004']&#10;    process = None&#10;&#10;    def run(self):&#10;        if self.process is None:&#10;            self.__find_free_port()&#10;            self.__prepare_database()&#10;            self.process = subprocess.Popen([&#10;                sys.executable, self.file_to_test,&#10;                'runserver', self.port, '--noreload',&#10;            ])&#10;&#10;    def __prepare_database(self):&#10;        if os.environ.get('HYPERSKILL_TESTS_WITH_SQLITE3'):&#10;            os.environ['HYPERSKILL_TEST_DATABASE'] = TEST_DATABASE&#10;            with open(TEST_DATABASE, 'w'):&#10;                pass&#10;            migrate = subprocess.Popen(&#10;                [sys.executable, self.file_to_test, 'migrate'],&#10;                stderr=subprocess.PIPE&#10;            )&#10;            exit_code = migrate.wait()&#10;            if exit_code != 0:&#10;                raise UnexpectedErrorException(migrate.stderr.read().decode())&#10;&#10;    def check_server(self):&#10;        if self.port == '0':&#10;            return CheckResult.false(&#10;                f'Please free one of the ports: {&quot;, &quot;.join(self.tryout_ports)}'&#10;            )&#10;&#10;        for _ in range(15):&#10;            try:&#10;                urlopen(f'http://localhost:{self.port}/not-existing-link-by-default')&#10;                return CheckResult.true()&#10;            except URLError as err:&#10;                if isinstance(err, HTTPError):&#10;                    return CheckResult.true()&#10;                sleep(1)&#10;        else:&#10;            return CheckResult.false(&#10;                'Cannot start the ./manage.py runserver for 15 seconds'&#10;            )&#10;&#10;    def __find_free_port(self):&#10;        for port in self.tryout_ports:&#10;            try:&#10;                urlopen(f'http://localhost:{port}')&#10;            except URLError as err:&#10;                if isinstance(err.reason, ConnectionRefusedError):&#10;                    self.port = port&#10;                    break&#10;            except ConnectionResetError:&#10;                pass&#10;&#10;    def read_page(self, link: str) -&gt; str:&#10;        return urlopen(link).read().decode().replace('\u00a0', ' ')&#10;&#10;    def after_all_tests(self):&#10;        if self.process is not None:&#10;            try:&#10;                self._kill(self.process.pid, signal.SIGINT)&#10;            except ProcessLookupError:&#10;                pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/exceptions.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/exceptions.py" />
                                <option name="text" value="&#10;class BadSolutionException(Exception):&#10;    def __init__(self, message):&#10;        self.message = message&#10;&#10;&#10;class SyntaxException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class ExitException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class UnexpectedErrorException(Exception):&#10;    pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/stage_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/stage_test.py" />
                                <option name="text" value="import sys&#10;import runpy&#10;import os&#10;import io&#10;import importlib&#10;import signal&#10;import builtins&#10;import traceback&#10;from typing import List, Any, Dict&#10;from hstest.test_helper import *&#10;from hstest.test_case import TestCase&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import *&#10;&#10;&#10;class StageTest:&#10;&#10;    real_stdin = None&#10;    real_print = None&#10;    real_input = None&#10;    user_output: io.StringIO = None&#10;&#10;    @staticmethod&#10;    def remove_kill_methods():&#10;        os.kill = lambda *x, **y: exit(0)&#10;        os._exit = lambda *x, **y: exit(0)&#10;        os.killpg = lambda *x, **y: exit(0)&#10;        signal.pthread_kill = lambda *x, **y: exit(0)&#10;        signal.siginterrupt = lambda *x, **y: exit(0)&#10;&#10;    @staticmethod&#10;    def set_input(user_input: str):&#10;        sys.stdin = io.StringIO(user_input)&#10;&#10;    @staticmethod&#10;    def add_input(user_input: str):&#10;        sys.stdin: io.StringIO&#10;        curr_position = sys.stdin.seek(0, io.SEEK_CUR)&#10;        sys.stdin.seek(0)&#10;        sys.stdin = io.StringIO(sys.stdin.read() + user_input)&#10;        sys.stdin.seek(curr_position)&#10;&#10;    @staticmethod&#10;    def print(*args, **kwargs):&#10;        StageTest.real_print(*args, **kwargs)&#10;        StageTest.real_print(*args, **kwargs, file=StageTest.user_output)&#10;&#10;    @staticmethod&#10;    def input(arg=''):&#10;        StageTest.print(arg, end='')&#10;        user_input = StageTest.real_input()&#10;        # StageTest.print()&#10;        return user_input&#10;&#10;    @staticmethod&#10;    def replace_globals():&#10;        StageTest.real_stdin = sys.stdin&#10;        StageTest.real_print = builtins.print&#10;        StageTest.real_input = builtins.input&#10;        builtins.print = StageTest.print&#10;        builtins.input = StageTest.input&#10;&#10;    @staticmethod&#10;    def get_print_back():&#10;        builtins.print = StageTest.real_print&#10;        sys.stdin = StageTest.real_stdin&#10;&#10;    def __init__(self, module_to_test: str):&#10;        self.remove_kill_methods()&#10;        self.replace_globals()&#10;        self.module_to_test = module_to_test&#10;        self.this_test_file = __file__&#10;        self.file_to_test = module_to_test.replace('.', os.sep) + '.py'&#10;        self.full_file_to_test = ''&#10;        self.tests: List[TestCase] = []&#10;&#10;    def reset(self):&#10;        StageTest.user_output = io.StringIO()&#10;        top_module = self.module_to_test[:self.module_to_test.index('.')]&#10;        for name, module in list(sys.modules.items()):&#10;            if name.startswith(top_module):&#10;                importlib.reload(module)&#10;&#10;    @staticmethod&#10;    def create_files(files: Dict[str, str]):&#10;        for file, content in files.items():&#10;            with open(file, 'w') as f:&#10;                f.write(content)&#10;&#10;    @staticmethod&#10;    def delete_files(files: Dict[str, str]):&#10;        for file in files.keys():&#10;            if os.path.isfile(file):&#10;                os.remove(file)&#10;&#10;    def run(self):&#10;        runpy.run_module(&#10;            self.module_to_test,&#10;            run_name=&quot;__main__&quot;&#10;        )&#10;&#10;    def test(self, test_case: TestCase) -&gt; str:&#10;        self.reset()&#10;        try:&#10;            self.create_files(test_case.files)&#10;            sys.argv = [self.file_to_test] + test_case.args&#10;            self.set_input(test_case.input)&#10;            self.run()&#10;            self.delete_files(test_case.files)&#10;            return StageTest.user_output.getvalue()&#10;&#10;        except SyntaxError as e:&#10;&#10;            file = e.filename&#10;            file = file.replace(os.sep, '.')&#10;            file = file[file.index(self.module_to_test):-3]&#10;            file = file.replace('.', os.sep) + '.py'&#10;&#10;            output = f'File &quot;{file}&quot;, line {e.lineno}\n' \&#10;                     + e.text.strip()[: e.offset-1] + '\n' \&#10;                     'SyntaxError: invalid syntax'&#10;&#10;            # '`' * (e.offset - 2) + '^'&#10;&#10;            raise SyntaxException(output)&#10;&#10;        except (SystemExit, KeyboardInterrupt):&#10;            raise ExitException('Tried to exit.')&#10;&#10;    def generate(self) -&gt; List[TestCase]:&#10;        raise NotImplemented&#10;&#10;    def check(self, reply: str, attach: Any) -&gt; CheckResult:&#10;        raise NotImplemented&#10;&#10;    def after_all_tests(self):&#10;        pass&#10;&#10;    def get_stacktrace(self, hide_internals, skipped_traces=0):&#10;&#10;        if self.full_file_to_test != '':&#10;            common_prefix = os.path.commonpath([&#10;                self.full_file_to_test, self.this_test_file&#10;            ])&#10;        else:&#10;            common_prefix = ''&#10;&#10;        exc_type, exc_obj, exc_tb = sys.exc_info()&#10;&#10;        if hide_internals and skipped_traces != 0:&#10;            traceback_msg = 'Traceback (most recent call last):\n'&#10;        else:&#10;            traceback_msg = ''&#10;&#10;        for line in traceback.TracebackException(&#10;                type(exc_obj), exc_obj, exc_tb, limit=None).format(chain=None):&#10;            if not hide_internals:&#10;                traceback_msg += line&#10;            elif skipped_traces &gt;= 0:&#10;                skipped_traces -= 1&#10;            elif self.this_test_file not in line:&#10;                traceback_msg += line.replace(common_prefix + os.sep, '')&#10;&#10;        return traceback_msg&#10;&#10;    def run_tests(self):&#10;&#10;        test_number = 0&#10;        try:&#10;            for test in self.generate():&#10;                test_number += 1&#10;                reply = self.test(test)&#10;                result = self.check(reply, test.attach)&#10;                if not result.result:&#10;                    fail_msg = f'Wrong answer in test #{test_number}'&#10;                    self.get_print_back()&#10;                    failed(fail_msg + '\n\n' + result.feedback)&#10;                    break&#10;            passed()&#10;&#10;        except SyntaxException as ex:&#10;            self.get_print_back()&#10;            failed(ex.message)&#10;&#10;        except ExitException as ex:&#10;            error_msg = f'Error in test #{test_number}'&#10;            self.get_print_back()&#10;            failed(error_msg + '\n\n' + ex.message)&#10;&#10;        except Exception:&#10;&#10;            exc_type, exc_obj, exc_tb = sys.exc_info()&#10;            trace_frames = []&#10;&#10;            user_trace_started = False&#10;            skipped_traces = 0&#10;            while exc_tb is not None:&#10;                code = exc_tb.tb_frame.f_code&#10;                filename = code.co_filename&#10;&#10;                if filename.endswith(self.file_to_test) and not user_trace_started:&#10;                    user_trace_started = True&#10;                    self.full_file_to_test = exc_tb.tb_frame.f_code.co_filename&#10;&#10;                if user_trace_started:&#10;                    trace_frames += [exc_tb.tb_frame.f_code]&#10;                else:&#10;                    skipped_traces += 1&#10;&#10;                exc_tb = exc_tb.tb_next&#10;&#10;            if not trace_frames:&#10;                exception_msg = (&#10;                        f&quot;Fatal error in test #{test_number}, &quot; +&#10;                        &quot;please send the report to Hyperskill team.&quot;&#10;                )&#10;                stacktrace = self.get_stacktrace(hide_internals=False)&#10;&#10;            else:&#10;                exception_msg = f'Exception in test #{test_number}'&#10;                stacktrace = self.get_stacktrace(&#10;                    hide_internals=True,&#10;                    skipped_traces=skipped_traces&#10;                )&#10;&#10;            self.get_print_back()&#10;            failed(exception_msg + '\n\n' + stacktrace)&#10;        finally:&#10;            self.after_all_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_case.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_case.py" />
                                <option name="text" value="from typing import List, Dict, Any, Tuple, Callable&#10;&#10;&#10;class TestCase:&#10;&#10;    def __init__(self, *, stdin='', args=None,&#10;                 attach=None, files=None, copy_to_attach=False,&#10;                 attach_callback=None):&#10;        self.input: str = stdin&#10;        self.args: List[str] = [] if args is None else args&#10;        self.attach: Any = attach&#10;        self.attach_callback: Callable = attach_callback&#10;        self.files: Dict[str, str] = {} if files is None else files&#10;        if copy_to_attach:&#10;            self.attach = stdin&#10;&#10;    @staticmethod&#10;    def from_stepik(stepik_tests: List[Tuple[str, Any]]) -&gt; List['TestCase']:&#10;        hs_tests = []&#10;        for test in stepik_tests:&#10;            hs_test = TestCase()&#10;            if type(test) in (list, tuple):&#10;                hs_test.input = test[0]&#10;                hs_test.attach = test[1]&#10;            elif type(test) is str:&#10;                hs_test.input = test&#10;            else:&#10;                raise ValueError(&quot;Bad test: &quot; + str(test))&#10;            hs_tests += [hs_test]&#10;        return hs_tests&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_helper.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_helper.py" />
                                <option name="text" value="&#10;def set_congratulation_message(message):&#10;    &quot;&quot;&quot; Overrides default 'Congratulations!' message &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin CONGRATS_MESSAGE &quot; + message)&#10;&#10;&#10;def failed(message: str):&#10;    &quot;&quot;&quot; Reports failure &quot;&quot;&quot;&#10;    lines = message.splitlines()&#10;    print(&quot;\n#educational_plugin FAILED + &quot; + lines[0])&#10;    for line in lines[1:]:&#10;        print(&quot;#educational_plugin &quot; + line)&#10;&#10;&#10;def passed():&#10;    &quot;&quot;&quot; Reports success &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin test OK&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;&#10;# Create your views here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/vacancy/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/urls.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/urls.py" />
                                <option name="text" value="&quot;&quot;&quot;hyperjob URL Configuration&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/2.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.contrib import admin&#10;from django.urls import path&#10;&#10;urlpatterns = [&#10;    path('admin/', admin.site.urls),&#10;]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/wsgi.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/wsgi.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;WSGI config for hyperjob project.&#10;&#10;It exposes the WSGI callable as a module-level variable named ``application``.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;from django.core.wsgi import get_wsgi_application&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hyperjob.settings')&#10;&#10;application = get_wsgi_application()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/settings.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/settings.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;Django settings for hyperjob project.&#10;&#10;Generated by 'django-admin startproject' using Django 2.2.6.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/2.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = '*57#^8!%%x4wi6byh%qj3!&amp;7b)qu5ve7m5tz9&amp;)2^jievj2j1b'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;    'resume',&#10;    'vacancy',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'hyperjob.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'hyperjob.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': os.environ.get('HYPERSKILL_TEST_DATABASE') or os.path.join(BASE_DIR, 'db.sqlite3'),&#10;    }&#10;}&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/2.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_L10N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/2.2/howto/static-files/&#10;&#10;STATIC_URL = '/static/'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/manage.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/manage.py" />
                                <option name="text" value="#!/usr/bin/env python&#10;&quot;&quot;&quot;Django's command-line utility for administrative tasks.&quot;&quot;&quot;&#10;import os&#10;import sys&#10;&#10;&#10;def main():&#10;    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hyperjob.settings')&#10;    try:&#10;        from django.core.management import execute_from_command_line&#10;    except ImportError as exc:&#10;        raise ImportError(&#10;            &quot;Couldn't import Django. Are you sure it's installed and &quot;&#10;            &quot;available on your PYTHONPATH environment variable? Did you &quot;&#10;            &quot;forget to activate a virtual environment?&quot;&#10;        ) from exc&#10;    execute_from_command_line(sys.argv)&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class ResumeConfig(AppConfig):&#10;    name = 'resume'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="base.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="base.py" />
                                <option name="text" value="import http.cookiejar&#10;import re&#10;import urllib&#10;import sqlite3&#10;&#10;from hstest.django_test import DjangoTest, TEST_DATABASE&#10;from hstest.check_result import CheckResult&#10;&#10;&#10;INITIAL_USERS = [&#10;    (1, 'Lemon_2059', 'contemp2015@protonmail.com', True),&#10;    (2, 'RuthlessnessSirens-1882', 'oversured1842@yahoo.com', True),&#10;    (3, 'moping_1935', 'tenons1970@outlook.com', True),&#10;    (4, 'MillagePenstemon-1843', 'chrisman1923@yandex.com', True),&#10;    (5, 'Archeus.1930', 'concentric1895@gmail.com', True),&#10;    (6, 'BenzalazineCurite.1832', 'quassiin1927@live.com', True),&#10;    (7, 'Bossa-1831', 'breena1977@live.com', False),&#10;    (8, 'ClinkChinho_2027', 'adansonia1808@gmail.com', False),&#10;    (9, 'RepassableTournefortian.1973', 'vomer1822@yahoo.com', False),&#10;    (10, 'debenture-1898', 'average2014@yahoo.com', False),&#10;]&#10;&#10;INITIAL_VACANCIES = [&#10;    (1, 'Botanist'),&#10;    (2, 'Signwriter'),&#10;    (3, 'Stewardess'),&#10;    (4, 'Medical Secretary'),&#10;    (5, 'Stone Cutter'),&#10;    (6, 'Musician'),&#10;]&#10;&#10;INITIAL_RESUMES = [&#10;    (7, 'Charge Hand'),&#10;    (8, 'Occupations'),&#10;    (9, 'Milklady'),&#10;    (10, 'Auctioneer'),&#10;]&#10;&#10;&#10;class HyperJobTest(DjangoTest):&#10;    USERNAME = 'Sparrow_1949'&#10;    PASSWORD = 's&lt;myW8Dh'&#10;    OCCUPATION = 'Flower Arranger'&#10;&#10;    ELEMENT_PATTERN = '''&lt;a[^&gt;]+href=['&quot;](?P&lt;href&gt;[a-zA-Z/_]+)['&quot;][^&gt;]*&gt;'''&#10;    cookie_jar = http.cookiejar.CookieJar()&#10;&#10;    def check_create_resume_from_profile(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/home')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the home page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.false('Missing csrf_token in the form')&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/resume/new',&#10;                data=urllib.parse.urlencode({&#10;                    'description': self.OCCUPATION,&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;        except urllib.error.URLError as err:&#10;            return CheckResult.false(f'Cannot create resume: {err.reason}')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/resumes')&#10;            description = f'{self.USERNAME}: {self.OCCUPATION}'&#10;            if description not in page:&#10;                return CheckResult.false(&#10;                    f'Resumes page does not contain newly created resume'&#10;                )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the resumes page.')&#10;&#10;    def check_create_resumes(self) -&gt; CheckResult:&#10;        connection = sqlite3.connect(TEST_DATABASE)&#10;        cursor = connection.cursor()&#10;        try:&#10;            cursor.executemany(&#10;                'INSERT INTO auth_user '&#10;                '(`id`, `username`, `email`, `is_staff`, `password`, `is_superuser`, '&#10;                '`first_name`, `last_name`, `is_active`, `date_joined`) '&#10;                'VALUES (?, ?, ?, ?, &quot;&quot;, 0, &quot;&quot;, &quot;&quot;, 1, datetime())',&#10;                INITIAL_USERS[len(INITIAL_VACANCIES):]&#10;            )&#10;            cursor.executemany(&#10;                'INSERT INTO resume_resume (`author_id`, `description`) VALUES (?, ?)',&#10;                INITIAL_RESUMES&#10;            )&#10;            connection.commit()&#10;&#10;            cursor.execute('SELECT `author_id`, `description` FROM resume_resume')&#10;            result = cursor.fetchall()&#10;&#10;            for item in INITIAL_RESUMES:&#10;                if item not in result:&#10;                    return CheckResult.false('Check your Resume model')&#10;            return CheckResult.true()&#10;&#10;        except sqlite3.DatabaseError as err:&#10;            return CheckResult.false(str(err))&#10;&#10;    def check_create_vacancies(self) -&gt; CheckResult:&#10;        connection = sqlite3.connect(TEST_DATABASE)&#10;        cursor = connection.cursor()&#10;        try:&#10;            cursor.executemany(&#10;                'INSERT INTO auth_user '&#10;                '(`id`, `username`, `email`, `is_staff`, `password`, `is_superuser`, '&#10;                '`first_name`, `last_name`, `is_active`, `date_joined`) '&#10;                'VALUES (?, ?, ?, ?, &quot;&quot;, 0, &quot;&quot;, &quot;&quot;, 1, datetime())',&#10;                INITIAL_USERS[:len(INITIAL_VACANCIES)]&#10;            )&#10;            cursor.executemany(&#10;                'INSERT INTO vacancy_vacancy (`author_id`, `description`) VALUES (?, ?)',&#10;                INITIAL_VACANCIES&#10;            )&#10;            connection.commit()&#10;&#10;            cursor.execute('SELECT `author_id`, `description` FROM vacancy_vacancy')&#10;            result = cursor.fetchall()&#10;&#10;            for item in INITIAL_VACANCIES:&#10;                if item not in result:&#10;                    return CheckResult.false('Check your Vacancy model')&#10;            return CheckResult.true()&#10;&#10;        except sqlite3.DatabaseError as err:&#10;            return CheckResult.false(str(err))&#10;&#10;    def check_forbid_anonymous_create(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener()&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/home')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the home page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.true()&#10;&#10;        OTHER_OCCUPATION = 'Marketing Coordinator'&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/resume/new',&#10;                data=urllib.parse.urlencode({&#10;                    'description': OTHER_OCCUPATION,&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;            return CheckResult.false('Should not allow anonymous users create resumes')&#10;        except urllib.error.URLError as err:&#10;            if 'Forbidden' not in err.reason:&#10;                return CheckResult.false(f'Wrong response for forbidden requests: {err.reason}')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/resumes')&#10;            if OTHER_OCCUPATION in page:&#10;                return CheckResult.false(&#10;                    f'Resumes page should not contain resumes from anonymous users'&#10;                )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the resumes page.')&#10;&#10;    def check_forbid_to_create_vacancy(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/home')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the home page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.true()&#10;&#10;        OTHER_OCCUPATION = 'Marketing Coordinator'&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/vacancy/new',&#10;                data=urllib.parse.urlencode({&#10;                    'description': OTHER_OCCUPATION,&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;            return CheckResult.false('Should not allow usual users create vacancies')&#10;        except urllib.error.URLError as err:&#10;            if 'Forbidden' not in err.reason:&#10;                return CheckResult.false(f'Wrong response for forbidden requests: {err.reason}')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/vacancies')&#10;            if OTHER_OCCUPATION in page:&#10;                return CheckResult.false(&#10;                    f'Vacancies page should not contain vacancies from usual users'&#10;                )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the vacancies page.')&#10;&#10;    def check_greeting(self) -&gt; CheckResult:&#10;        try:&#10;            main_page = self.read_page(f'http://localhost:{self.port}')&#10;            if 'Welcome to HyperJob!' in main_page:&#10;                return CheckResult.true()&#10;            return CheckResult.false(&#10;                'Main page should contain &quot;Welcome to HyperJob!&quot; line'&#10;            )&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the menu page.'&#10;            )&#10;&#10;    def check_links(self) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}')&#10;            links = re.findall(self.ELEMENT_PATTERN, page)&#10;            for link in (&#10;                '/login',&#10;                '/signup',&#10;                '/vacancies',&#10;                '/resumes',&#10;                '/home',&#10;            ):&#10;                if link not in links:&#10;                    return CheckResult.false(&#10;                        f'Menu page should contain &lt;a&gt; element with href {link}'&#10;                    )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the menu page.'&#10;            )&#10;&#10;    def check_login(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/login')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the login page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.false('Missing csrf_token in the form')&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/login',&#10;                data=urllib.parse.urlencode({&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                    'username': self.USERNAME,&#10;                    'password': self.PASSWORD,&#10;                }).encode()&#10;            )&#10;            if 'login' not in response.url:&#10;                return CheckResult.true()&#10;            return CheckResult.false('Cannot login: problems with form')&#10;        except urllib.error.URLError as err:&#10;            return CheckResult.false(f'Cannot login: {err.reason}')&#10;&#10;    def check_resumes(self) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/resumes')&#10;            for person, resume in zip(INITIAL_USERS[len(INITIAL_VACANCIES):], INITIAL_RESUMES):&#10;                description = f'{person[1]}: {resume[1]}'&#10;                if description not in page:&#10;                    return CheckResult.false(&#10;                        f'Resumes page should contain resumes in form &lt;username&gt;: &lt;description&gt;'&#10;                    )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the resumes page.'&#10;            )&#10;&#10;    def check_signup(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar)&#10;        )&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/signup')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the signup page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.false('Missing csrf_token in the form')&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/signup',&#10;                data=urllib.parse.urlencode({&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                    'username': self.USERNAME,&#10;                    'password1': self.PASSWORD,&#10;                    'password2': self.PASSWORD,&#10;                }).encode()&#10;            )&#10;            if f'login' in response.url:&#10;                return CheckResult.true()&#10;            return CheckResult.false('Cannot signup: problems with form')&#10;        except urllib.error.URLError as err:&#10;            return CheckResult.false(f'Cannot signup: {err.reason}')&#10;&#10;    def check_vacancies(self) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/vacancies')&#10;            for person, vacancy in zip(INITIAL_USERS, INITIAL_VACANCIES):&#10;                description = f'{person[1]}: {vacancy[1]}'&#10;                if description not in page:&#10;                    return CheckResult.false(&#10;                        f'Vacancies page should contain vacancies in form &lt;username&gt;: &lt;description&gt;'&#10;                    )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the vacancies page.'&#10;            )&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;&#10;# Create your views here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/resume/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class VacancyConfig(AppConfig):&#10;    name = 'vacancy'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="db.test.sqlite3">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="db.test.sqlite3" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/db.sqlite3">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/db.sqlite3" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/migrations/0001_initial.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/migrations/0001_initial.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/migrations/0001_initial.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/migrations/0001_initial.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage2" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;The users of the service will be managers and candidates. A manager can create vacancies and read the candidate's resume; a candidate can create a resume and view vacancies. Both of them need a way to log in, log out, and see their profile.&lt;/p&gt;&#10;&#10;&lt;p&gt;So many pages to make, but first things first: the menu.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;The menu will be the main page of the service. This page will have the links to all other pages that the user needs. From the menu, you can go to the vacancies list, resumes list, and personal profile. In the head of the page, there will be a greeting message.&lt;/p&gt;&#10;&#10;&lt;p&gt;Let's look at a simple design.&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;&#9;&lt;li&gt;The menu should contain the &lt;code class=&quot;language-html&quot;&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; element at the top:&#10;&#10;&#9;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;h2&amp;gt;Welcome to HyperJob!&amp;lt;/h2&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#10;&#9;&lt;/li&gt;&#10;&#9;&lt;li&gt;Five links should go next in separate &lt;code class=&quot;language-html&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements:&#10;&#9;&lt;ul&gt;&#10;&#9;&#9;&lt;li&gt;To login page with the &lt;code class=&quot;language-html&quot;&gt;href&lt;/code&gt; attribute equals &lt;code class=&quot;language-html&quot;&gt;&quot;/login&quot;&lt;/code&gt;&lt;/li&gt;&#10;&#9;&#9;&lt;li&gt;To sign up page with the &lt;code class=&quot;language-html&quot;&gt;href&lt;/code&gt; attribute equals &lt;code class=&quot;language-html&quot;&gt;&quot;/signup&quot;&lt;/code&gt;&lt;/li&gt;&#10;&#9;&#9;&lt;li&gt;To vacancies list with the &lt;code class=&quot;language-html&quot;&gt;href&lt;/code&gt; attribute equals &lt;code class=&quot;language-html&quot;&gt;&quot;/vacancies&quot;&lt;/code&gt;&lt;/li&gt;&#10;&#9;&#9;&lt;li&gt;To resumes list with the &lt;code class=&quot;language-html&quot;&gt;href&lt;/code&gt; attribute equals &lt;code class=&quot;language-html&quot;&gt;&quot;/resumes&quot;&lt;/code&gt;&lt;/li&gt;&#10;&#9;&#9;&lt;li&gt;To personal profile with the &lt;code class=&quot;language-html&quot;&gt;href&lt;/code&gt; attribute equals &lt;code class=&quot;language-html&quot;&gt;&quot;/home&quot;&lt;/code&gt;&lt;/li&gt;&#10;&#9;&lt;/ul&gt;&#10;&#9;&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;If you start the application on your computer with &lt;code class=&quot;language-html&quot;&gt;python manage.py runserver&lt;/code&gt; command, the menu should be available on the address &lt;em&gt;localhost:8000&lt;/em&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;div class=&quot;alert alert-primary&quot;&gt; If you want to use a custom directory for your templates, add the path to it to the &lt;code class=&quot;language-html&quot;&gt;TEMPLATE['DIRS']&lt;/code&gt; list in the &lt;em&gt;settings.py&lt;/em&gt; module. &lt;/div&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;To combine a &lt;a target=&quot;_blank&quot; href=&quot;https://docs.djangoproject.com/en/2.2/topics/class-based-views/intro/#handling-forms-with-class-based-views&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;template with the HTTP handler&lt;/a&gt;, you can use the &lt;code class=&quot;language-html&quot;&gt;django.shortcuts.render&lt;/code&gt; function.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;render(request, template_name)&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;You don't need to implement the handlers for these pages: you'll do it at the next steps.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/94/stages/520/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8599" />
                      <option name="index" value="2" />
                      <option name="name" value="Main menu" />
                      <option name="record" value="2" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="hyperjob/vacancy/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;&#10;# Create your views here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/urls.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/hyperjob/urls.py" />
                                <option name="text" value="&quot;&quot;&quot;hyperjob URL Configuration&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/2.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.contrib import admin&#10;from django.urls import path&#10;&#10;urlpatterns = [&#10;    path('admin/', admin.site.urls),&#10;]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/wsgi.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/wsgi.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;WSGI config for hyperjob project.&#10;&#10;It exposes the WSGI callable as a module-level variable named ``application``.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;from django.core.wsgi import get_wsgi_application&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hyperjob.settings')&#10;&#10;application = get_wsgi_application()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/settings.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/hyperjob/settings.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;Django settings for hyperjob project.&#10;&#10;Generated by 'django-admin startproject' using Django 2.2.6.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/2.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = '*57#^8!%%x4wi6byh%qj3!&amp;7b)qu5ve7m5tz9&amp;)2^jievj2j1b'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;    'resume',&#10;    'vacancy',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'hyperjob.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'hyperjob.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': os.environ.get('HYPERSKILL_TEST_DATABASE') or os.path.join(BASE_DIR, 'db.sqlite3'),&#10;    }&#10;}&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/2.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_L10N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/2.2/howto/static-files/&#10;&#10;STATIC_URL = '/static/'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/manage.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/manage.py" />
                                <option name="text" value="#!/usr/bin/env python&#10;&quot;&quot;&quot;Django's command-line utility for administrative tasks.&quot;&quot;&quot;&#10;import os&#10;import sys&#10;&#10;&#10;def main():&#10;    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hyperjob.settings')&#10;    try:&#10;        from django.core.management import execute_from_command_line&#10;    except ImportError as exc:&#10;        raise ImportError(&#10;            &quot;Couldn't import Django. Are you sure it's installed and &quot;&#10;            &quot;available on your PYTHONPATH environment variable? Did you &quot;&#10;            &quot;forget to activate a virtual environment?&quot;&#10;        ) from exc&#10;    execute_from_command_line(sys.argv)&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class ResumeConfig(AppConfig):&#10;    name = 'resume'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;&#10;# Create your views here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class VacancyConfig(AppConfig):&#10;    name = 'vacancy'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from hstest.test_case import TestCase&#10;&#10;from base import HyperJobTest&#10;&#10;&#10;class HyperJobTestRunner(HyperJobTest):&#10;    def generate(self):&#10;        return [&#10;            # 1 task&#10;            TestCase(attach=self.check_server),&#10;            TestCase(attach=self.check_create_vacancies),&#10;            TestCase(attach=self.check_create_resumes),&#10;            # 2 task&#10;            TestCase(attach=self.check_greeting),&#10;            TestCase(attach=self.check_links),&#10;        ]&#10;&#10;    def check(self, reply, attach):&#10;        return attach()&#10;&#10;&#10;if __name__ == '__main__':&#10;    import os&#10;    os.environ['HYPERSKILL_TESTS_WITH_SQLITE3'] = '1'&#10;    HyperJobTestRunner('hyperjob.manage').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/check_result.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/check_result.py" />
                                <option name="text" value="class CheckResult:&#10;&#10;    def __init__(self, result: bool, feedback: str):&#10;        self.result = result&#10;        self.feedback = feedback&#10;&#10;    @staticmethod&#10;    def true():&#10;        return CheckResult(True, '')&#10;&#10;    @staticmethod&#10;    def false(feedback: str = ''):&#10;        return CheckResult(False, feedback)&#10;&#10;&#10;def wrong(feedback: str = '') -&gt; CheckResult:&#10;    return CheckResult.false(feedback)&#10;&#10;&#10;def accept():&#10;    return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/django_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/django_test.py" />
                                <option name="text" value="import os&#10;import shutil&#10;import signal&#10;import subprocess&#10;import sys&#10;from time import sleep&#10;from urllib.error import URLError, HTTPError&#10;from urllib.request import urlopen&#10;from hstest.stage_test import StageTest&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import UnexpectedErrorException&#10;&#10;&#10;EMPTY_DATABASE = 'empty.sqlite3'&#10;TEST_DATABASE = 'db.test.sqlite3'&#10;&#10;&#10;class DjangoTest(StageTest):&#10;    _kill = os.kill&#10;    port = '0'&#10;    tryout_ports = ['8000', '8001', '8002', '8003', '8004']&#10;    process = None&#10;&#10;    def run(self):&#10;        if self.process is None:&#10;            self.__find_free_port()&#10;            self.__prepare_database()&#10;            self.process = subprocess.Popen([&#10;                sys.executable, self.file_to_test,&#10;                'runserver', self.port, '--noreload',&#10;            ])&#10;&#10;    def __prepare_database(self):&#10;        if os.environ.get('HYPERSKILL_TESTS_WITH_SQLITE3'):&#10;            os.environ['HYPERSKILL_TEST_DATABASE'] = TEST_DATABASE&#10;            with open(TEST_DATABASE, 'w'):&#10;                pass&#10;            migrate = subprocess.Popen(&#10;                [sys.executable, self.file_to_test, 'migrate'],&#10;                stderr=subprocess.PIPE&#10;            )&#10;            exit_code = migrate.wait()&#10;            if exit_code != 0:&#10;                raise UnexpectedErrorException(migrate.stderr.read().decode())&#10;&#10;    def check_server(self):&#10;        if self.port == '0':&#10;            return CheckResult.false(&#10;                f'Please free one of the ports: {&quot;, &quot;.join(self.tryout_ports)}'&#10;            )&#10;&#10;        for _ in range(15):&#10;            try:&#10;                urlopen(f'http://localhost:{self.port}/not-existing-link-by-default')&#10;                return CheckResult.true()&#10;            except URLError as err:&#10;                if isinstance(err, HTTPError):&#10;                    return CheckResult.true()&#10;                sleep(1)&#10;        else:&#10;            return CheckResult.false(&#10;                'Cannot start the ./manage.py runserver for 15 seconds'&#10;            )&#10;&#10;    def __find_free_port(self):&#10;        for port in self.tryout_ports:&#10;            try:&#10;                urlopen(f'http://localhost:{port}')&#10;            except URLError as err:&#10;                if isinstance(err.reason, ConnectionRefusedError):&#10;                    self.port = port&#10;                    break&#10;            except ConnectionResetError:&#10;                pass&#10;&#10;    def read_page(self, link: str) -&gt; str:&#10;        return urlopen(link).read().decode().replace('\u00a0', ' ')&#10;&#10;    def after_all_tests(self):&#10;        if self.process is not None:&#10;            try:&#10;                self._kill(self.process.pid, signal.SIGINT)&#10;            except ProcessLookupError:&#10;                pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/exceptions.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/exceptions.py" />
                                <option name="text" value="&#10;class BadSolutionException(Exception):&#10;    def __init__(self, message):&#10;        self.message = message&#10;&#10;&#10;class SyntaxException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class ExitException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class UnexpectedErrorException(Exception):&#10;    pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/stage_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/stage_test.py" />
                                <option name="text" value="import sys&#10;import runpy&#10;import os&#10;import io&#10;import importlib&#10;import signal&#10;import builtins&#10;import traceback&#10;from typing import List, Any, Dict&#10;from hstest.test_helper import *&#10;from hstest.test_case import TestCase&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import *&#10;&#10;&#10;class StageTest:&#10;&#10;    real_stdin = None&#10;    real_print = None&#10;    real_input = None&#10;    user_output: io.StringIO = None&#10;&#10;    @staticmethod&#10;    def remove_kill_methods():&#10;        os.kill = lambda *x, **y: exit(0)&#10;        os._exit = lambda *x, **y: exit(0)&#10;        os.killpg = lambda *x, **y: exit(0)&#10;        signal.pthread_kill = lambda *x, **y: exit(0)&#10;        signal.siginterrupt = lambda *x, **y: exit(0)&#10;&#10;    @staticmethod&#10;    def set_input(user_input: str):&#10;        sys.stdin = io.StringIO(user_input)&#10;&#10;    @staticmethod&#10;    def add_input(user_input: str):&#10;        sys.stdin: io.StringIO&#10;        curr_position = sys.stdin.seek(0, io.SEEK_CUR)&#10;        sys.stdin.seek(0)&#10;        sys.stdin = io.StringIO(sys.stdin.read() + user_input)&#10;        sys.stdin.seek(curr_position)&#10;&#10;    @staticmethod&#10;    def print(*args, **kwargs):&#10;        StageTest.real_print(*args, **kwargs)&#10;        StageTest.real_print(*args, **kwargs, file=StageTest.user_output)&#10;&#10;    @staticmethod&#10;    def input(arg=''):&#10;        StageTest.print(arg, end='')&#10;        user_input = StageTest.real_input()&#10;        # StageTest.print()&#10;        return user_input&#10;&#10;    @staticmethod&#10;    def replace_globals():&#10;        StageTest.real_stdin = sys.stdin&#10;        StageTest.real_print = builtins.print&#10;        StageTest.real_input = builtins.input&#10;        builtins.print = StageTest.print&#10;        builtins.input = StageTest.input&#10;&#10;    @staticmethod&#10;    def get_print_back():&#10;        builtins.print = StageTest.real_print&#10;        sys.stdin = StageTest.real_stdin&#10;&#10;    def __init__(self, module_to_test: str):&#10;        self.remove_kill_methods()&#10;        self.replace_globals()&#10;        self.module_to_test = module_to_test&#10;        self.this_test_file = __file__&#10;        self.file_to_test = module_to_test.replace('.', os.sep) + '.py'&#10;        self.full_file_to_test = ''&#10;        self.tests: List[TestCase] = []&#10;&#10;    def reset(self):&#10;        StageTest.user_output = io.StringIO()&#10;        top_module = self.module_to_test[:self.module_to_test.index('.')]&#10;        for name, module in list(sys.modules.items()):&#10;            if name.startswith(top_module):&#10;                importlib.reload(module)&#10;&#10;    @staticmethod&#10;    def create_files(files: Dict[str, str]):&#10;        for file, content in files.items():&#10;            with open(file, 'w') as f:&#10;                f.write(content)&#10;&#10;    @staticmethod&#10;    def delete_files(files: Dict[str, str]):&#10;        for file in files.keys():&#10;            if os.path.isfile(file):&#10;                os.remove(file)&#10;&#10;    def run(self):&#10;        runpy.run_module(&#10;            self.module_to_test,&#10;            run_name=&quot;__main__&quot;&#10;        )&#10;&#10;    def test(self, test_case: TestCase) -&gt; str:&#10;        self.reset()&#10;        try:&#10;            self.create_files(test_case.files)&#10;            sys.argv = [self.file_to_test] + test_case.args&#10;            self.set_input(test_case.input)&#10;            self.run()&#10;            self.delete_files(test_case.files)&#10;            return StageTest.user_output.getvalue()&#10;&#10;        except SyntaxError as e:&#10;&#10;            file = e.filename&#10;            file = file.replace(os.sep, '.')&#10;            file = file[file.index(self.module_to_test):-3]&#10;            file = file.replace('.', os.sep) + '.py'&#10;&#10;            output = f'File &quot;{file}&quot;, line {e.lineno}\n' \&#10;                     + e.text.strip()[: e.offset-1] + '\n' \&#10;                     'SyntaxError: invalid syntax'&#10;&#10;            # '`' * (e.offset - 2) + '^'&#10;&#10;            raise SyntaxException(output)&#10;&#10;        except (SystemExit, KeyboardInterrupt):&#10;            raise ExitException('Tried to exit.')&#10;&#10;    def generate(self) -&gt; List[TestCase]:&#10;        raise NotImplemented&#10;&#10;    def check(self, reply: str, attach: Any) -&gt; CheckResult:&#10;        raise NotImplemented&#10;&#10;    def after_all_tests(self):&#10;        pass&#10;&#10;    def get_stacktrace(self, hide_internals, skipped_traces=0):&#10;&#10;        if self.full_file_to_test != '':&#10;            common_prefix = os.path.commonpath([&#10;                self.full_file_to_test, self.this_test_file&#10;            ])&#10;        else:&#10;            common_prefix = ''&#10;&#10;        exc_type, exc_obj, exc_tb = sys.exc_info()&#10;&#10;        if hide_internals and skipped_traces != 0:&#10;            traceback_msg = 'Traceback (most recent call last):\n'&#10;        else:&#10;            traceback_msg = ''&#10;&#10;        for line in traceback.TracebackException(&#10;                type(exc_obj), exc_obj, exc_tb, limit=None).format(chain=None):&#10;            if not hide_internals:&#10;                traceback_msg += line&#10;            elif skipped_traces &gt;= 0:&#10;                skipped_traces -= 1&#10;            elif self.this_test_file not in line:&#10;                traceback_msg += line.replace(common_prefix + os.sep, '')&#10;&#10;        return traceback_msg&#10;&#10;    def run_tests(self):&#10;&#10;        test_number = 0&#10;        try:&#10;            for test in self.generate():&#10;                test_number += 1&#10;                reply = self.test(test)&#10;                result = self.check(reply, test.attach)&#10;                if not result.result:&#10;                    fail_msg = f'Wrong answer in test #{test_number}'&#10;                    self.get_print_back()&#10;                    failed(fail_msg + '\n\n' + result.feedback)&#10;                    break&#10;            passed()&#10;&#10;        except SyntaxException as ex:&#10;            self.get_print_back()&#10;            failed(ex.message)&#10;&#10;        except ExitException as ex:&#10;            error_msg = f'Error in test #{test_number}'&#10;            self.get_print_back()&#10;            failed(error_msg + '\n\n' + ex.message)&#10;&#10;        except Exception:&#10;&#10;            exc_type, exc_obj, exc_tb = sys.exc_info()&#10;            trace_frames = []&#10;&#10;            user_trace_started = False&#10;            skipped_traces = 0&#10;            while exc_tb is not None:&#10;                code = exc_tb.tb_frame.f_code&#10;                filename = code.co_filename&#10;&#10;                if filename.endswith(self.file_to_test) and not user_trace_started:&#10;                    user_trace_started = True&#10;                    self.full_file_to_test = exc_tb.tb_frame.f_code.co_filename&#10;&#10;                if user_trace_started:&#10;                    trace_frames += [exc_tb.tb_frame.f_code]&#10;                else:&#10;                    skipped_traces += 1&#10;&#10;                exc_tb = exc_tb.tb_next&#10;&#10;            if not trace_frames:&#10;                exception_msg = (&#10;                        f&quot;Fatal error in test #{test_number}, &quot; +&#10;                        &quot;please send the report to Hyperskill team.&quot;&#10;                )&#10;                stacktrace = self.get_stacktrace(hide_internals=False)&#10;&#10;            else:&#10;                exception_msg = f'Exception in test #{test_number}'&#10;                stacktrace = self.get_stacktrace(&#10;                    hide_internals=True,&#10;                    skipped_traces=skipped_traces&#10;                )&#10;&#10;            self.get_print_back()&#10;            failed(exception_msg + '\n\n' + stacktrace)&#10;        finally:&#10;            self.after_all_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_case.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_case.py" />
                                <option name="text" value="from typing import List, Dict, Any, Tuple, Callable&#10;&#10;&#10;class TestCase:&#10;&#10;    def __init__(self, *, stdin='', args=None,&#10;                 attach=None, files=None, copy_to_attach=False,&#10;                 attach_callback=None):&#10;        self.input: str = stdin&#10;        self.args: List[str] = [] if args is None else args&#10;        self.attach: Any = attach&#10;        self.attach_callback: Callable = attach_callback&#10;        self.files: Dict[str, str] = {} if files is None else files&#10;        if copy_to_attach:&#10;            self.attach = stdin&#10;&#10;    @staticmethod&#10;    def from_stepik(stepik_tests: List[Tuple[str, Any]]) -&gt; List['TestCase']:&#10;        hs_tests = []&#10;        for test in stepik_tests:&#10;            hs_test = TestCase()&#10;            if type(test) in (list, tuple):&#10;                hs_test.input = test[0]&#10;                hs_test.attach = test[1]&#10;            elif type(test) is str:&#10;                hs_test.input = test&#10;            else:&#10;                raise ValueError(&quot;Bad test: &quot; + str(test))&#10;            hs_tests += [hs_test]&#10;        return hs_tests&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_helper.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_helper.py" />
                                <option name="text" value="&#10;def set_congratulation_message(message):&#10;    &quot;&quot;&quot; Overrides default 'Congratulations!' message &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin CONGRATS_MESSAGE &quot; + message)&#10;&#10;&#10;def failed(message: str):&#10;    &quot;&quot;&quot; Reports failure &quot;&quot;&quot;&#10;    lines = message.splitlines()&#10;    print(&quot;\n#educational_plugin FAILED + &quot; + lines[0])&#10;    for line in lines[1:]:&#10;        print(&quot;#educational_plugin &quot; + line)&#10;&#10;&#10;def passed():&#10;    &quot;&quot;&quot; Reports success &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin test OK&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="base.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="base.py" />
                                <option name="text" value="import http.cookiejar&#10;import re&#10;import urllib&#10;import sqlite3&#10;&#10;from hstest.django_test import DjangoTest, TEST_DATABASE&#10;from hstest.check_result import CheckResult&#10;&#10;&#10;INITIAL_USERS = [&#10;    (1, 'Lemon_2059', 'contemp2015@protonmail.com', True),&#10;    (2, 'RuthlessnessSirens-1882', 'oversured1842@yahoo.com', True),&#10;    (3, 'moping_1935', 'tenons1970@outlook.com', True),&#10;    (4, 'MillagePenstemon-1843', 'chrisman1923@yandex.com', True),&#10;    (5, 'Archeus.1930', 'concentric1895@gmail.com', True),&#10;    (6, 'BenzalazineCurite.1832', 'quassiin1927@live.com', True),&#10;    (7, 'Bossa-1831', 'breena1977@live.com', False),&#10;    (8, 'ClinkChinho_2027', 'adansonia1808@gmail.com', False),&#10;    (9, 'RepassableTournefortian.1973', 'vomer1822@yahoo.com', False),&#10;    (10, 'debenture-1898', 'average2014@yahoo.com', False),&#10;]&#10;&#10;INITIAL_VACANCIES = [&#10;    (1, 'Botanist'),&#10;    (2, 'Signwriter'),&#10;    (3, 'Stewardess'),&#10;    (4, 'Medical Secretary'),&#10;    (5, 'Stone Cutter'),&#10;    (6, 'Musician'),&#10;]&#10;&#10;INITIAL_RESUMES = [&#10;    (7, 'Charge Hand'),&#10;    (8, 'Occupations'),&#10;    (9, 'Milklady'),&#10;    (10, 'Auctioneer'),&#10;]&#10;&#10;&#10;class HyperJobTest(DjangoTest):&#10;    USERNAME = 'Sparrow_1949'&#10;    PASSWORD = 's&lt;myW8Dh'&#10;    OCCUPATION = 'Flower Arranger'&#10;&#10;    ELEMENT_PATTERN = '''&lt;a[^&gt;]+href=['&quot;](?P&lt;href&gt;[a-zA-Z/_]+)['&quot;][^&gt;]*&gt;'''&#10;    cookie_jar = http.cookiejar.CookieJar()&#10;&#10;    def check_create_resume_from_profile(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/home')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the home page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.false('Missing csrf_token in the form')&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/resume/new',&#10;                data=urllib.parse.urlencode({&#10;                    'description': self.OCCUPATION,&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;        except urllib.error.URLError as err:&#10;            return CheckResult.false(f'Cannot create resume: {err.reason}')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/resumes')&#10;            description = f'{self.USERNAME}: {self.OCCUPATION}'&#10;            if description not in page:&#10;                return CheckResult.false(&#10;                    f'Resumes page does not contain newly created resume'&#10;                )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the resumes page.')&#10;&#10;    def check_create_resumes(self) -&gt; CheckResult:&#10;        connection = sqlite3.connect(TEST_DATABASE)&#10;        cursor = connection.cursor()&#10;        try:&#10;            cursor.executemany(&#10;                'INSERT INTO auth_user '&#10;                '(`id`, `username`, `email`, `is_staff`, `password`, `is_superuser`, '&#10;                '`first_name`, `last_name`, `is_active`, `date_joined`) '&#10;                'VALUES (?, ?, ?, ?, &quot;&quot;, 0, &quot;&quot;, &quot;&quot;, 1, datetime())',&#10;                INITIAL_USERS[len(INITIAL_VACANCIES):]&#10;            )&#10;            cursor.executemany(&#10;                'INSERT INTO resume_resume (`author_id`, `description`) VALUES (?, ?)',&#10;                INITIAL_RESUMES&#10;            )&#10;            connection.commit()&#10;&#10;            cursor.execute('SELECT `author_id`, `description` FROM resume_resume')&#10;            result = cursor.fetchall()&#10;&#10;            for item in INITIAL_RESUMES:&#10;                if item not in result:&#10;                    return CheckResult.false('Check your Resume model')&#10;            return CheckResult.true()&#10;&#10;        except sqlite3.DatabaseError as err:&#10;            return CheckResult.false(str(err))&#10;&#10;    def check_create_vacancies(self) -&gt; CheckResult:&#10;        connection = sqlite3.connect(TEST_DATABASE)&#10;        cursor = connection.cursor()&#10;        try:&#10;            cursor.executemany(&#10;                'INSERT INTO auth_user '&#10;                '(`id`, `username`, `email`, `is_staff`, `password`, `is_superuser`, '&#10;                '`first_name`, `last_name`, `is_active`, `date_joined`) '&#10;                'VALUES (?, ?, ?, ?, &quot;&quot;, 0, &quot;&quot;, &quot;&quot;, 1, datetime())',&#10;                INITIAL_USERS[:len(INITIAL_VACANCIES)]&#10;            )&#10;            cursor.executemany(&#10;                'INSERT INTO vacancy_vacancy (`author_id`, `description`) VALUES (?, ?)',&#10;                INITIAL_VACANCIES&#10;            )&#10;            connection.commit()&#10;&#10;            cursor.execute('SELECT `author_id`, `description` FROM vacancy_vacancy')&#10;            result = cursor.fetchall()&#10;&#10;            for item in INITIAL_VACANCIES:&#10;                if item not in result:&#10;                    return CheckResult.false('Check your Vacancy model')&#10;            return CheckResult.true()&#10;&#10;        except sqlite3.DatabaseError as err:&#10;            return CheckResult.false(str(err))&#10;&#10;    def check_forbid_anonymous_create(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener()&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/home')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the home page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.true()&#10;&#10;        OTHER_OCCUPATION = 'Marketing Coordinator'&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/resume/new',&#10;                data=urllib.parse.urlencode({&#10;                    'description': OTHER_OCCUPATION,&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;            return CheckResult.false('Should not allow anonymous users create resumes')&#10;        except urllib.error.URLError as err:&#10;            if 'Forbidden' not in err.reason:&#10;                return CheckResult.false(f'Wrong response for forbidden requests: {err.reason}')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/resumes')&#10;            if OTHER_OCCUPATION in page:&#10;                return CheckResult.false(&#10;                    f'Resumes page should not contain resumes from anonymous users'&#10;                )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the resumes page.')&#10;&#10;    def check_forbid_to_create_vacancy(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/home')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the home page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.true()&#10;&#10;        OTHER_OCCUPATION = 'Marketing Coordinator'&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/vacancy/new',&#10;                data=urllib.parse.urlencode({&#10;                    'description': OTHER_OCCUPATION,&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;            return CheckResult.false('Should not allow usual users create vacancies')&#10;        except urllib.error.URLError as err:&#10;            if 'Forbidden' not in err.reason:&#10;                return CheckResult.false(f'Wrong response for forbidden requests: {err.reason}')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/vacancies')&#10;            if OTHER_OCCUPATION in page:&#10;                return CheckResult.false(&#10;                    f'Vacancies page should not contain vacancies from usual users'&#10;                )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the vacancies page.')&#10;&#10;    def check_greeting(self) -&gt; CheckResult:&#10;        try:&#10;            main_page = self.read_page(f'http://localhost:{self.port}')&#10;            if 'Welcome to HyperJob!' in main_page:&#10;                return CheckResult.true()&#10;            return CheckResult.false(&#10;                'Main page should contain &quot;Welcome to HyperJob!&quot; line'&#10;            )&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the menu page.'&#10;            )&#10;&#10;    def check_links(self) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}')&#10;            links = re.findall(self.ELEMENT_PATTERN, page)&#10;            for link in (&#10;                '/login',&#10;                '/signup',&#10;                '/vacancies',&#10;                '/resumes',&#10;                '/home',&#10;            ):&#10;                if link not in links:&#10;                    return CheckResult.false(&#10;                        f'Menu page should contain &lt;a&gt; element with href {link}'&#10;                    )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the menu page.'&#10;            )&#10;&#10;    def check_login(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/login')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the login page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.false('Missing csrf_token in the form')&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/login',&#10;                data=urllib.parse.urlencode({&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                    'username': self.USERNAME,&#10;                    'password': self.PASSWORD,&#10;                }).encode()&#10;            )&#10;            if 'login' not in response.url:&#10;                return CheckResult.true()&#10;            return CheckResult.false('Cannot login: problems with form')&#10;        except urllib.error.URLError as err:&#10;            return CheckResult.false(f'Cannot login: {err.reason}')&#10;&#10;    def check_resumes(self) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/resumes')&#10;            for person, resume in zip(INITIAL_USERS[len(INITIAL_VACANCIES):], INITIAL_RESUMES):&#10;                description = f'{person[1]}: {resume[1]}'&#10;                if description not in page:&#10;                    return CheckResult.false(&#10;                        f'Resumes page should contain resumes in form &lt;username&gt;: &lt;description&gt;'&#10;                    )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the resumes page.'&#10;            )&#10;&#10;    def check_signup(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar)&#10;        )&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/signup')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the signup page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.false('Missing csrf_token in the form')&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/signup',&#10;                data=urllib.parse.urlencode({&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                    'username': self.USERNAME,&#10;                    'password1': self.PASSWORD,&#10;                    'password2': self.PASSWORD,&#10;                }).encode()&#10;            )&#10;            if f'login' in response.url:&#10;                return CheckResult.true()&#10;            return CheckResult.false('Cannot signup: problems with form')&#10;        except urllib.error.URLError as err:&#10;            return CheckResult.false(f'Cannot signup: {err.reason}')&#10;&#10;    def check_vacancies(self) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/vacancies')&#10;            for person, vacancy in zip(INITIAL_USERS, INITIAL_VACANCIES):&#10;                description = f'{person[1]}: {vacancy[1]}'&#10;                if description not in page:&#10;                    return CheckResult.false(&#10;                        f'Vacancies page should contain vacancies in form &lt;username&gt;: &lt;description&gt;'&#10;                    )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the vacancies page.'&#10;            )&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/migrations/0001_initial.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/migrations/0001_initial.py" />
                                <option name="text" value="# Generated by Django 2.2 on 2020-07-18 13:50&#10;&#10;from django.conf import settings&#10;from django.db import migrations, models&#10;import django.db.models.deletion&#10;&#10;&#10;class Migration(migrations.Migration):&#10;&#10;    initial = True&#10;&#10;    dependencies = [&#10;        migrations.swappable_dependency(settings.AUTH_USER_MODEL),&#10;    ]&#10;&#10;    operations = [&#10;        migrations.CreateModel(&#10;            name='Vacancy',&#10;            fields=[&#10;                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),&#10;                ('description', models.TextField(max_length=1024)),&#10;                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),&#10;            ],&#10;        ),&#10;    ]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/migrations/0001_initial.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/migrations/0001_initial.py" />
                                <option name="text" value="# Generated by Django 2.2 on 2020-07-18 13:50&#10;&#10;from django.conf import settings&#10;from django.db import migrations, models&#10;import django.db.models.deletion&#10;&#10;&#10;class Migration(migrations.Migration):&#10;&#10;    initial = True&#10;&#10;    dependencies = [&#10;        migrations.swappable_dependency(settings.AUTH_USER_MODEL),&#10;    ]&#10;&#10;    operations = [&#10;        migrations.CreateModel(&#10;            name='Resume',&#10;            fields=[&#10;                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),&#10;                ('description', models.TextField(max_length=1024)),&#10;                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),&#10;            ],&#10;        ),&#10;    ]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/template/index.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/template/index.html" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/hyperjob/views.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/templates/hyperjob/main.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/templates/hyperjob/main.html" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/templates/hyperjob/main.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/hyperjob/templates/hyperjob/main.html" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage3" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;The agency wants to launch the site this month. However, not all the pages will be ready at that moment. We should create two particular pages to make the site work. Without the list of vacancies and the list of resumes the service has no meaning, so we need to create these pages first.&lt;/p&gt;&#10;&#10;&lt;p&gt;Let's look at the design of the pages.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;Your task is to create the vacancies and resumes pages. We'll show the list of items one by one without any sorting. You can add any additional information on the page if you like, but every item from the list should satisfy the given design:&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;&#9;&lt;li&gt;Each resume or vacancy should be in a separate &lt;code class=&quot;language-python&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element&lt;/li&gt;&#10;&#9;&lt;li&gt;The text in an element should be &quot;&lt;em&gt;&amp;lt;author&amp;gt;: &amp;lt;description&amp;gt;&lt;/em&gt;&quot;, where &lt;em&gt;&amp;lt;author&amp;gt; &lt;/em&gt;is the &lt;code class=&quot;language-python&quot;&gt;username&lt;/code&gt; field of the &lt;code class=&quot;language-python&quot;&gt;User&lt;/code&gt; model.&#10;&#9;&lt;p&gt;Example: &lt;code class=&quot;language-python&quot;&gt;&amp;lt;div&amp;gt;Pierre: Product Designer&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;&#10;&#9;&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;If you start the application on your computer with &lt;code class=&quot;language-python&quot;&gt;python manage.py runserver&lt;/code&gt; command, the vacancies list should be available at the address &lt;em&gt;localhost:8000/vacancies&lt;/em&gt; and resumes on &lt;em&gt;localhost:8000/resumes&lt;/em&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;To combine a &lt;a target=&quot;_blank&quot; href=&quot;https://docs.djangoproject.com/en/2.2/topics/class-based-views/intro/#handling-forms-with-class-based-views&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;template with the HTTP handler&lt;/a&gt; you can use &lt;code class=&quot;language-python&quot;&gt;django.shortcuts.render&lt;/code&gt; function. To pass any arguments to the template, add the dictionary to the &lt;code class=&quot;language-python&quot;&gt;render&lt;/code&gt; function:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;render(request, template_name, {'name_you_are_using_in_template': your_variable})&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;div class=&quot;alert alert-warning&quot;&gt; Tests for your project are running on a prepared independent database. Do not bother about the data you have in yours. &lt;/div&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/94/stages/521/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8600" />
                      <option name="index" value="3" />
                      <option name="name" value="Vacancies and resumes pages" />
                      <option name="record" value="3" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="hyperjob/vacancy/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/vacancy/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/vacancy/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;&#10;# Create your views here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/urls.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/hyperjob/urls.py" />
                                <option name="text" value="&quot;&quot;&quot;hyperjob URL Configuration&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/2.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.contrib import admin&#10;from django.urls import path&#10;&#10;urlpatterns = [&#10;    path('admin/', admin.site.urls),&#10;]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/wsgi.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/wsgi.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;WSGI config for hyperjob project.&#10;&#10;It exposes the WSGI callable as a module-level variable named ``application``.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;from django.core.wsgi import get_wsgi_application&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hyperjob.settings')&#10;&#10;application = get_wsgi_application()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/settings.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/settings.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;Django settings for hyperjob project.&#10;&#10;Generated by 'django-admin startproject' using Django 2.2.6.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/2.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = '*57#^8!%%x4wi6byh%qj3!&amp;7b)qu5ve7m5tz9&amp;)2^jievj2j1b'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;    'resume',&#10;    'vacancy',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'hyperjob.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'hyperjob.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': os.environ.get('HYPERSKILL_TEST_DATABASE') or os.path.join(BASE_DIR, 'db.sqlite3'),&#10;    }&#10;}&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/2.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_L10N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/2.2/howto/static-files/&#10;&#10;STATIC_URL = '/static/'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/manage.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/manage.py" />
                                <option name="text" value="#!/usr/bin/env python&#10;&quot;&quot;&quot;Django's command-line utility for administrative tasks.&quot;&quot;&quot;&#10;import os&#10;import sys&#10;&#10;&#10;def main():&#10;    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hyperjob.settings')&#10;    try:&#10;        from django.core.management import execute_from_command_line&#10;    except ImportError as exc:&#10;        raise ImportError(&#10;            &quot;Couldn't import Django. Are you sure it's installed and &quot;&#10;            &quot;available on your PYTHONPATH environment variable? Did you &quot;&#10;            &quot;forget to activate a virtual environment?&quot;&#10;        ) from exc&#10;    execute_from_command_line(sys.argv)&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class ResumeConfig(AppConfig):&#10;    name = 'resume'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/resume/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/resume/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;&#10;# Create your views here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class VacancyConfig(AppConfig):&#10;    name = 'vacancy'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from hstest.test_case import TestCase&#10;&#10;from base import HyperJobTest&#10;&#10;&#10;class HyperJobTestRunner(HyperJobTest):&#10;    def generate(self):&#10;        return [&#10;            # 1 task&#10;            TestCase(attach=self.check_server),&#10;            TestCase(attach=self.check_create_vacancies),&#10;            TestCase(attach=self.check_create_resumes),&#10;            # 2 task&#10;            TestCase(attach=self.check_greeting),&#10;            TestCase(attach=self.check_links),&#10;            # 3 task&#10;            TestCase(attach=self.check_vacancies),&#10;            TestCase(attach=self.check_resumes),&#10;        ]&#10;&#10;    def check(self, reply, attach):&#10;        return attach()&#10;&#10;&#10;if __name__ == '__main__':&#10;    import os&#10;    os.environ['HYPERSKILL_TESTS_WITH_SQLITE3'] = '1'&#10;    HyperJobTestRunner('hyperjob.manage').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/check_result.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/check_result.py" />
                                <option name="text" value="class CheckResult:&#10;&#10;    def __init__(self, result: bool, feedback: str):&#10;        self.result = result&#10;        self.feedback = feedback&#10;&#10;    @staticmethod&#10;    def true():&#10;        return CheckResult(True, '')&#10;&#10;    @staticmethod&#10;    def false(feedback: str = ''):&#10;        return CheckResult(False, feedback)&#10;&#10;&#10;def wrong(feedback: str = '') -&gt; CheckResult:&#10;    return CheckResult.false(feedback)&#10;&#10;&#10;def accept():&#10;    return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/django_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/django_test.py" />
                                <option name="text" value="import os&#10;import shutil&#10;import signal&#10;import subprocess&#10;import sys&#10;from time import sleep&#10;from urllib.error import URLError, HTTPError&#10;from urllib.request import urlopen&#10;from hstest.stage_test import StageTest&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import UnexpectedErrorException&#10;&#10;&#10;EMPTY_DATABASE = 'empty.sqlite3'&#10;TEST_DATABASE = 'db.test.sqlite3'&#10;&#10;&#10;class DjangoTest(StageTest):&#10;    _kill = os.kill&#10;    port = '0'&#10;    tryout_ports = ['8000', '8001', '8002', '8003', '8004']&#10;    process = None&#10;&#10;    def run(self):&#10;        if self.process is None:&#10;            self.__find_free_port()&#10;            self.__prepare_database()&#10;            self.process = subprocess.Popen([&#10;                sys.executable, self.file_to_test,&#10;                'runserver', self.port, '--noreload',&#10;            ])&#10;&#10;    def __prepare_database(self):&#10;        if os.environ.get('HYPERSKILL_TESTS_WITH_SQLITE3'):&#10;            os.environ['HYPERSKILL_TEST_DATABASE'] = TEST_DATABASE&#10;            with open(TEST_DATABASE, 'w'):&#10;                pass&#10;            migrate = subprocess.Popen(&#10;                [sys.executable, self.file_to_test, 'migrate'],&#10;                stderr=subprocess.PIPE&#10;            )&#10;            exit_code = migrate.wait()&#10;            if exit_code != 0:&#10;                raise UnexpectedErrorException(migrate.stderr.read().decode())&#10;&#10;    def check_server(self):&#10;        if self.port == '0':&#10;            return CheckResult.false(&#10;                f'Please free one of the ports: {&quot;, &quot;.join(self.tryout_ports)}'&#10;            )&#10;&#10;        for _ in range(15):&#10;            try:&#10;                urlopen(f'http://localhost:{self.port}/not-existing-link-by-default')&#10;                return CheckResult.true()&#10;            except URLError as err:&#10;                if isinstance(err, HTTPError):&#10;                    return CheckResult.true()&#10;                sleep(1)&#10;        else:&#10;            return CheckResult.false(&#10;                'Cannot start the ./manage.py runserver for 15 seconds'&#10;            )&#10;&#10;    def __find_free_port(self):&#10;        for port in self.tryout_ports:&#10;            try:&#10;                urlopen(f'http://localhost:{port}')&#10;            except URLError as err:&#10;                if isinstance(err.reason, ConnectionRefusedError):&#10;                    self.port = port&#10;                    break&#10;            except ConnectionResetError:&#10;                pass&#10;&#10;    def read_page(self, link: str) -&gt; str:&#10;        return urlopen(link).read().decode().replace('\u00a0', ' ')&#10;&#10;    def after_all_tests(self):&#10;        if self.process is not None:&#10;            try:&#10;                self._kill(self.process.pid, signal.SIGINT)&#10;            except ProcessLookupError:&#10;                pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/exceptions.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/exceptions.py" />
                                <option name="text" value="&#10;class BadSolutionException(Exception):&#10;    def __init__(self, message):&#10;        self.message = message&#10;&#10;&#10;class SyntaxException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class ExitException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class UnexpectedErrorException(Exception):&#10;    pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/stage_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/stage_test.py" />
                                <option name="text" value="import sys&#10;import runpy&#10;import os&#10;import io&#10;import importlib&#10;import signal&#10;import builtins&#10;import traceback&#10;from typing import List, Any, Dict&#10;from hstest.test_helper import *&#10;from hstest.test_case import TestCase&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import *&#10;&#10;&#10;class StageTest:&#10;&#10;    real_stdin = None&#10;    real_print = None&#10;    real_input = None&#10;    user_output: io.StringIO = None&#10;&#10;    @staticmethod&#10;    def remove_kill_methods():&#10;        os.kill = lambda *x, **y: exit(0)&#10;        os._exit = lambda *x, **y: exit(0)&#10;        os.killpg = lambda *x, **y: exit(0)&#10;        signal.pthread_kill = lambda *x, **y: exit(0)&#10;        signal.siginterrupt = lambda *x, **y: exit(0)&#10;&#10;    @staticmethod&#10;    def set_input(user_input: str):&#10;        sys.stdin = io.StringIO(user_input)&#10;&#10;    @staticmethod&#10;    def add_input(user_input: str):&#10;        sys.stdin: io.StringIO&#10;        curr_position = sys.stdin.seek(0, io.SEEK_CUR)&#10;        sys.stdin.seek(0)&#10;        sys.stdin = io.StringIO(sys.stdin.read() + user_input)&#10;        sys.stdin.seek(curr_position)&#10;&#10;    @staticmethod&#10;    def print(*args, **kwargs):&#10;        StageTest.real_print(*args, **kwargs)&#10;        StageTest.real_print(*args, **kwargs, file=StageTest.user_output)&#10;&#10;    @staticmethod&#10;    def input(arg=''):&#10;        StageTest.print(arg, end='')&#10;        user_input = StageTest.real_input()&#10;        # StageTest.print()&#10;        return user_input&#10;&#10;    @staticmethod&#10;    def replace_globals():&#10;        StageTest.real_stdin = sys.stdin&#10;        StageTest.real_print = builtins.print&#10;        StageTest.real_input = builtins.input&#10;        builtins.print = StageTest.print&#10;        builtins.input = StageTest.input&#10;&#10;    @staticmethod&#10;    def get_print_back():&#10;        builtins.print = StageTest.real_print&#10;        sys.stdin = StageTest.real_stdin&#10;&#10;    def __init__(self, module_to_test: str):&#10;        self.remove_kill_methods()&#10;        self.replace_globals()&#10;        self.module_to_test = module_to_test&#10;        self.this_test_file = __file__&#10;        self.file_to_test = module_to_test.replace('.', os.sep) + '.py'&#10;        self.full_file_to_test = ''&#10;        self.tests: List[TestCase] = []&#10;&#10;    def reset(self):&#10;        StageTest.user_output = io.StringIO()&#10;        top_module = self.module_to_test[:self.module_to_test.index('.')]&#10;        for name, module in list(sys.modules.items()):&#10;            if name.startswith(top_module):&#10;                importlib.reload(module)&#10;&#10;    @staticmethod&#10;    def create_files(files: Dict[str, str]):&#10;        for file, content in files.items():&#10;            with open(file, 'w') as f:&#10;                f.write(content)&#10;&#10;    @staticmethod&#10;    def delete_files(files: Dict[str, str]):&#10;        for file in files.keys():&#10;            if os.path.isfile(file):&#10;                os.remove(file)&#10;&#10;    def run(self):&#10;        runpy.run_module(&#10;            self.module_to_test,&#10;            run_name=&quot;__main__&quot;&#10;        )&#10;&#10;    def test(self, test_case: TestCase) -&gt; str:&#10;        self.reset()&#10;        try:&#10;            self.create_files(test_case.files)&#10;            sys.argv = [self.file_to_test] + test_case.args&#10;            self.set_input(test_case.input)&#10;            self.run()&#10;            self.delete_files(test_case.files)&#10;            return StageTest.user_output.getvalue()&#10;&#10;        except SyntaxError as e:&#10;&#10;            file = e.filename&#10;            file = file.replace(os.sep, '.')&#10;            file = file[file.index(self.module_to_test):-3]&#10;            file = file.replace('.', os.sep) + '.py'&#10;&#10;            output = f'File &quot;{file}&quot;, line {e.lineno}\n' \&#10;                     + e.text.strip()[: e.offset-1] + '\n' \&#10;                     'SyntaxError: invalid syntax'&#10;&#10;            # '`' * (e.offset - 2) + '^'&#10;&#10;            raise SyntaxException(output)&#10;&#10;        except (SystemExit, KeyboardInterrupt):&#10;            raise ExitException('Tried to exit.')&#10;&#10;    def generate(self) -&gt; List[TestCase]:&#10;        raise NotImplemented&#10;&#10;    def check(self, reply: str, attach: Any) -&gt; CheckResult:&#10;        raise NotImplemented&#10;&#10;    def after_all_tests(self):&#10;        pass&#10;&#10;    def get_stacktrace(self, hide_internals, skipped_traces=0):&#10;&#10;        if self.full_file_to_test != '':&#10;            common_prefix = os.path.commonpath([&#10;                self.full_file_to_test, self.this_test_file&#10;            ])&#10;        else:&#10;            common_prefix = ''&#10;&#10;        exc_type, exc_obj, exc_tb = sys.exc_info()&#10;&#10;        if hide_internals and skipped_traces != 0:&#10;            traceback_msg = 'Traceback (most recent call last):\n'&#10;        else:&#10;            traceback_msg = ''&#10;&#10;        for line in traceback.TracebackException(&#10;                type(exc_obj), exc_obj, exc_tb, limit=None).format(chain=None):&#10;            if not hide_internals:&#10;                traceback_msg += line&#10;            elif skipped_traces &gt;= 0:&#10;                skipped_traces -= 1&#10;            elif self.this_test_file not in line:&#10;                traceback_msg += line.replace(common_prefix + os.sep, '')&#10;&#10;        return traceback_msg&#10;&#10;    def run_tests(self):&#10;&#10;        test_number = 0&#10;        try:&#10;            for test in self.generate():&#10;                test_number += 1&#10;                reply = self.test(test)&#10;                result = self.check(reply, test.attach)&#10;                if not result.result:&#10;                    fail_msg = f'Wrong answer in test #{test_number}'&#10;                    self.get_print_back()&#10;                    failed(fail_msg + '\n\n' + result.feedback)&#10;                    break&#10;            passed()&#10;&#10;        except SyntaxException as ex:&#10;            self.get_print_back()&#10;            failed(ex.message)&#10;&#10;        except ExitException as ex:&#10;            error_msg = f'Error in test #{test_number}'&#10;            self.get_print_back()&#10;            failed(error_msg + '\n\n' + ex.message)&#10;&#10;        except Exception:&#10;&#10;            exc_type, exc_obj, exc_tb = sys.exc_info()&#10;            trace_frames = []&#10;&#10;            user_trace_started = False&#10;            skipped_traces = 0&#10;            while exc_tb is not None:&#10;                code = exc_tb.tb_frame.f_code&#10;                filename = code.co_filename&#10;&#10;                if filename.endswith(self.file_to_test) and not user_trace_started:&#10;                    user_trace_started = True&#10;                    self.full_file_to_test = exc_tb.tb_frame.f_code.co_filename&#10;&#10;                if user_trace_started:&#10;                    trace_frames += [exc_tb.tb_frame.f_code]&#10;                else:&#10;                    skipped_traces += 1&#10;&#10;                exc_tb = exc_tb.tb_next&#10;&#10;            if not trace_frames:&#10;                exception_msg = (&#10;                        f&quot;Fatal error in test #{test_number}, &quot; +&#10;                        &quot;please send the report to Hyperskill team.&quot;&#10;                )&#10;                stacktrace = self.get_stacktrace(hide_internals=False)&#10;&#10;            else:&#10;                exception_msg = f'Exception in test #{test_number}'&#10;                stacktrace = self.get_stacktrace(&#10;                    hide_internals=True,&#10;                    skipped_traces=skipped_traces&#10;                )&#10;&#10;            self.get_print_back()&#10;            failed(exception_msg + '\n\n' + stacktrace)&#10;        finally:&#10;            self.after_all_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_case.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_case.py" />
                                <option name="text" value="from typing import List, Dict, Any, Tuple, Callable&#10;&#10;&#10;class TestCase:&#10;&#10;    def __init__(self, *, stdin='', args=None,&#10;                 attach=None, files=None, copy_to_attach=False,&#10;                 attach_callback=None):&#10;        self.input: str = stdin&#10;        self.args: List[str] = [] if args is None else args&#10;        self.attach: Any = attach&#10;        self.attach_callback: Callable = attach_callback&#10;        self.files: Dict[str, str] = {} if files is None else files&#10;        if copy_to_attach:&#10;            self.attach = stdin&#10;&#10;    @staticmethod&#10;    def from_stepik(stepik_tests: List[Tuple[str, Any]]) -&gt; List['TestCase']:&#10;        hs_tests = []&#10;        for test in stepik_tests:&#10;            hs_test = TestCase()&#10;            if type(test) in (list, tuple):&#10;                hs_test.input = test[0]&#10;                hs_test.attach = test[1]&#10;            elif type(test) is str:&#10;                hs_test.input = test&#10;            else:&#10;                raise ValueError(&quot;Bad test: &quot; + str(test))&#10;            hs_tests += [hs_test]&#10;        return hs_tests&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_helper.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_helper.py" />
                                <option name="text" value="&#10;def set_congratulation_message(message):&#10;    &quot;&quot;&quot; Overrides default 'Congratulations!' message &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin CONGRATS_MESSAGE &quot; + message)&#10;&#10;&#10;def failed(message: str):&#10;    &quot;&quot;&quot; Reports failure &quot;&quot;&quot;&#10;    lines = message.splitlines()&#10;    print(&quot;\n#educational_plugin FAILED + &quot; + lines[0])&#10;    for line in lines[1:]:&#10;        print(&quot;#educational_plugin &quot; + line)&#10;&#10;&#10;def passed():&#10;    &quot;&quot;&quot; Reports success &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin test OK&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="base.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="base.py" />
                                <option name="text" value="import http.cookiejar&#10;import re&#10;import urllib&#10;import sqlite3&#10;&#10;from hstest.django_test import DjangoTest, TEST_DATABASE&#10;from hstest.check_result import CheckResult&#10;&#10;&#10;INITIAL_USERS = [&#10;    (1, 'Lemon_2059', 'contemp2015@protonmail.com', True),&#10;    (2, 'RuthlessnessSirens-1882', 'oversured1842@yahoo.com', True),&#10;    (3, 'moping_1935', 'tenons1970@outlook.com', True),&#10;    (4, 'MillagePenstemon-1843', 'chrisman1923@yandex.com', True),&#10;    (5, 'Archeus.1930', 'concentric1895@gmail.com', True),&#10;    (6, 'BenzalazineCurite.1832', 'quassiin1927@live.com', True),&#10;    (7, 'Bossa-1831', 'breena1977@live.com', False),&#10;    (8, 'ClinkChinho_2027', 'adansonia1808@gmail.com', False),&#10;    (9, 'RepassableTournefortian.1973', 'vomer1822@yahoo.com', False),&#10;    (10, 'debenture-1898', 'average2014@yahoo.com', False),&#10;]&#10;&#10;INITIAL_VACANCIES = [&#10;    (1, 'Botanist'),&#10;    (2, 'Signwriter'),&#10;    (3, 'Stewardess'),&#10;    (4, 'Medical Secretary'),&#10;    (5, 'Stone Cutter'),&#10;    (6, 'Musician'),&#10;]&#10;&#10;INITIAL_RESUMES = [&#10;    (7, 'Charge Hand'),&#10;    (8, 'Occupations'),&#10;    (9, 'Milklady'),&#10;    (10, 'Auctioneer'),&#10;]&#10;&#10;&#10;class HyperJobTest(DjangoTest):&#10;    USERNAME = 'Sparrow_1949'&#10;    PASSWORD = 's&lt;myW8Dh'&#10;    OCCUPATION = 'Flower Arranger'&#10;&#10;    ELEMENT_PATTERN = '''&lt;a[^&gt;]+href=['&quot;](?P&lt;href&gt;[a-zA-Z/_]+)['&quot;][^&gt;]*&gt;'''&#10;    cookie_jar = http.cookiejar.CookieJar()&#10;&#10;    def check_create_resume_from_profile(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/home')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the home page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.false('Missing csrf_token in the form')&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/resume/new',&#10;                data=urllib.parse.urlencode({&#10;                    'description': self.OCCUPATION,&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;        except urllib.error.URLError as err:&#10;            return CheckResult.false(f'Cannot create resume: {err.reason}')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/resumes')&#10;            description = f'{self.USERNAME}: {self.OCCUPATION}'&#10;            if description not in page:&#10;                return CheckResult.false(&#10;                    f'Resumes page does not contain newly created resume'&#10;                )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the resumes page.')&#10;&#10;    def check_create_resumes(self) -&gt; CheckResult:&#10;        connection = sqlite3.connect(TEST_DATABASE)&#10;        cursor = connection.cursor()&#10;        try:&#10;            cursor.executemany(&#10;                'INSERT INTO auth_user '&#10;                '(`id`, `username`, `email`, `is_staff`, `password`, `is_superuser`, '&#10;                '`first_name`, `last_name`, `is_active`, `date_joined`) '&#10;                'VALUES (?, ?, ?, ?, &quot;&quot;, 0, &quot;&quot;, &quot;&quot;, 1, datetime())',&#10;                INITIAL_USERS[len(INITIAL_VACANCIES):]&#10;            )&#10;            cursor.executemany(&#10;                'INSERT INTO resume_resume (`author_id`, `description`) VALUES (?, ?)',&#10;                INITIAL_RESUMES&#10;            )&#10;            connection.commit()&#10;&#10;            cursor.execute('SELECT `author_id`, `description` FROM resume_resume')&#10;            result = cursor.fetchall()&#10;&#10;            for item in INITIAL_RESUMES:&#10;                if item not in result:&#10;                    return CheckResult.false('Check your Resume model')&#10;            return CheckResult.true()&#10;&#10;        except sqlite3.DatabaseError as err:&#10;            return CheckResult.false(str(err))&#10;&#10;    def check_create_vacancies(self) -&gt; CheckResult:&#10;        connection = sqlite3.connect(TEST_DATABASE)&#10;        cursor = connection.cursor()&#10;        try:&#10;            cursor.executemany(&#10;                'INSERT INTO auth_user '&#10;                '(`id`, `username`, `email`, `is_staff`, `password`, `is_superuser`, '&#10;                '`first_name`, `last_name`, `is_active`, `date_joined`) '&#10;                'VALUES (?, ?, ?, ?, &quot;&quot;, 0, &quot;&quot;, &quot;&quot;, 1, datetime())',&#10;                INITIAL_USERS[:len(INITIAL_VACANCIES)]&#10;            )&#10;            cursor.executemany(&#10;                'INSERT INTO vacancy_vacancy (`author_id`, `description`) VALUES (?, ?)',&#10;                INITIAL_VACANCIES&#10;            )&#10;            connection.commit()&#10;&#10;            cursor.execute('SELECT `author_id`, `description` FROM vacancy_vacancy')&#10;            result = cursor.fetchall()&#10;&#10;            for item in INITIAL_VACANCIES:&#10;                if item not in result:&#10;                    return CheckResult.false('Check your Vacancy model')&#10;            return CheckResult.true()&#10;&#10;        except sqlite3.DatabaseError as err:&#10;            return CheckResult.false(str(err))&#10;&#10;    def check_forbid_anonymous_create(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener()&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/home')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the home page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.true()&#10;&#10;        OTHER_OCCUPATION = 'Marketing Coordinator'&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/resume/new',&#10;                data=urllib.parse.urlencode({&#10;                    'description': OTHER_OCCUPATION,&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;            return CheckResult.false('Should not allow anonymous users create resumes')&#10;        except urllib.error.URLError as err:&#10;            if 'Forbidden' not in err.reason:&#10;                return CheckResult.false(f'Wrong response for forbidden requests: {err.reason}')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/resumes')&#10;            if OTHER_OCCUPATION in page:&#10;                return CheckResult.false(&#10;                    f'Resumes page should not contain resumes from anonymous users'&#10;                )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the resumes page.')&#10;&#10;    def check_forbid_to_create_vacancy(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/home')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the home page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.true()&#10;&#10;        OTHER_OCCUPATION = 'Marketing Coordinator'&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/vacancy/new',&#10;                data=urllib.parse.urlencode({&#10;                    'description': OTHER_OCCUPATION,&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;            return CheckResult.false('Should not allow usual users create vacancies')&#10;        except urllib.error.URLError as err:&#10;            if 'Forbidden' not in err.reason:&#10;                return CheckResult.false(f'Wrong response for forbidden requests: {err.reason}')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/vacancies')&#10;            if OTHER_OCCUPATION in page:&#10;                return CheckResult.false(&#10;                    f'Vacancies page should not contain vacancies from usual users'&#10;                )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the vacancies page.')&#10;&#10;    def check_greeting(self) -&gt; CheckResult:&#10;        try:&#10;            main_page = self.read_page(f'http://localhost:{self.port}')&#10;            if 'Welcome to HyperJob!' in main_page:&#10;                return CheckResult.true()&#10;            return CheckResult.false(&#10;                'Main page should contain &quot;Welcome to HyperJob!&quot; line'&#10;            )&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the menu page.'&#10;            )&#10;&#10;    def check_links(self) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}')&#10;            links = re.findall(self.ELEMENT_PATTERN, page)&#10;            for link in (&#10;                '/login',&#10;                '/signup',&#10;                '/vacancies',&#10;                '/resumes',&#10;                '/home',&#10;            ):&#10;                if link not in links:&#10;                    return CheckResult.false(&#10;                        f'Menu page should contain &lt;a&gt; element with href {link}'&#10;                    )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the menu page.'&#10;            )&#10;&#10;    def check_login(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/login')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the login page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.false('Missing csrf_token in the form')&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/login',&#10;                data=urllib.parse.urlencode({&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                    'username': self.USERNAME,&#10;                    'password': self.PASSWORD,&#10;                }).encode()&#10;            )&#10;            if 'login' not in response.url:&#10;                return CheckResult.true()&#10;            return CheckResult.false('Cannot login: problems with form')&#10;        except urllib.error.URLError as err:&#10;            return CheckResult.false(f'Cannot login: {err.reason}')&#10;&#10;    def check_resumes(self) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/resumes')&#10;            for person, resume in zip(INITIAL_USERS[len(INITIAL_VACANCIES):], INITIAL_RESUMES):&#10;                description = f'{person[1]}: {resume[1]}'&#10;                if description not in page:&#10;                    return CheckResult.false(&#10;                        f'Resumes page should contain resumes in form &lt;username&gt;: &lt;description&gt;'&#10;                    )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the resumes page.'&#10;            )&#10;&#10;    def check_signup(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar)&#10;        )&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/signup')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the signup page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.false('Missing csrf_token in the form')&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/signup',&#10;                data=urllib.parse.urlencode({&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                    'username': self.USERNAME,&#10;                    'password1': self.PASSWORD,&#10;                    'password2': self.PASSWORD,&#10;                }).encode()&#10;            )&#10;            if f'login' in response.url:&#10;                return CheckResult.true()&#10;            return CheckResult.false('Cannot signup: problems with form')&#10;        except urllib.error.URLError as err:&#10;            return CheckResult.false(f'Cannot signup: {err.reason}')&#10;&#10;    def check_vacancies(self) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/vacancies')&#10;            for person, vacancy in zip(INITIAL_USERS, INITIAL_VACANCIES):&#10;                description = f'{person[1]}: {vacancy[1]}'&#10;                if description not in page:&#10;                    return CheckResult.false(&#10;                        f'Vacancies page should contain vacancies in form &lt;username&gt;: &lt;description&gt;'&#10;                    )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the vacancies page.'&#10;            )&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/migrations/0001_initial.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/migrations/0001_initial.py" />
                                <option name="text" value="# Generated by Django 2.2 on 2020-07-18 13:50&#10;&#10;from django.conf import settings&#10;from django.db import migrations, models&#10;import django.db.models.deletion&#10;&#10;&#10;class Migration(migrations.Migration):&#10;&#10;    initial = True&#10;&#10;    dependencies = [&#10;        migrations.swappable_dependency(settings.AUTH_USER_MODEL),&#10;    ]&#10;&#10;    operations = [&#10;        migrations.CreateModel(&#10;            name='Vacancy',&#10;            fields=[&#10;                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),&#10;                ('description', models.TextField(max_length=1024)),&#10;                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),&#10;            ],&#10;        ),&#10;    ]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/templates/hyperjob/main.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/templates/hyperjob/main.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Main&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;h2&gt;Welcome to HyperJob!&lt;/h2&gt;&#10;    &lt;div&gt;&lt;a href=&quot;/login&quot;&gt;Login&lt;/a&gt;&lt;/div&gt;&#10;    &lt;div&gt;&lt;a href=&quot;/signup&quot;&gt;Signup&lt;/a&gt;&lt;/div&gt;&#10;    &lt;div&gt;&lt;a href=&quot;/vacancies&quot;&gt;Vacancies&lt;/a&gt;&lt;/div&gt;&#10;    &lt;div&gt;&lt;a href=&quot;/resumes&quot;&gt;Resumes&lt;/a&gt;&lt;/div&gt;&#10;    &lt;div&gt;&lt;a href=&quot;/home&quot;&gt;Home&lt;/a&gt;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/migrations/0001_initial.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/migrations/0001_initial.py" />
                                <option name="text" value="# Generated by Django 2.2 on 2020-07-18 13:50&#10;&#10;from django.conf import settings&#10;from django.db import migrations, models&#10;import django.db.models.deletion&#10;&#10;&#10;class Migration(migrations.Migration):&#10;&#10;    initial = True&#10;&#10;    dependencies = [&#10;        migrations.swappable_dependency(settings.AUTH_USER_MODEL),&#10;    ]&#10;&#10;    operations = [&#10;        migrations.CreateModel(&#10;            name='Resume',&#10;            fields=[&#10;                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),&#10;                ('description', models.TextField(max_length=1024)),&#10;                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),&#10;            ],&#10;        ),&#10;    ]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;from django.views import View&#10;&#10;&#10;# Create your views here.&#10;class MainView(View):&#10;    def get(self, request, *args, **kwargs):&#10;        return render(request, 'hyperjob/main.html', {})&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/templates/vacancy/vacancies.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/vacancy/templates/vacancy/vacancies.html" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/templates/resume/resumes.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/resume/templates/resume/resumes.html" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage4" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Success! We've met the deadline, and the service started working. The agency's receiving a lot of emails and phone calls right now, but there are also complaints: the users still cannot log in to publish their resumes.&lt;/p&gt;&#10;&#10;&lt;p&gt;The CTO of &lt;em&gt;HyperJob&lt;/em&gt; has written you an email:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;FROM: oficial@hyperjob.com&#10;TO: you@hyperjob.com&#10;DATE: today&#10;SUBJECT: Thanks for the great work&#10;&#10;We take a tremendous step towards a bright future.&#10;It's a great pleasure to have such professionals like you in our team!&#10;Could you start working on user authentication next? &lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;Your task is to create the authentication for the service. The service needs two pages to authenticate users: signup and login. On the signup page, the users register their accounts, and on the login page they pass the authentication by their username and password.&lt;/p&gt;&#10;&#10;&lt;p&gt;Please use &lt;code class=&quot;language-python&quot;&gt;django.contrib.auth.forms.UserCreationForm&lt;/code&gt; for your signup handler and &lt;code class=&quot;language-python&quot;&gt;django.contrib.auth.forms.AuthenticationForm&lt;/code&gt; for the login handler.&lt;/p&gt;&#10;&#10;&lt;p&gt;If the login request is successful, redirect the user to the menu page.&lt;/p&gt;&#10;&#10;&lt;p&gt;If you start the application on your computer with &lt;code class=&quot;language-html&quot;&gt;python manage.py runserver&lt;/code&gt; command, the signup page should be available at the address &lt;em&gt;localhost:8000/signup&lt;/em&gt; and login on &lt;em&gt;localhost:8000/login&lt;/em&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;Pay attention, that the &lt;em&gt;login&lt;/em&gt; and &lt;em&gt;signup&lt;/em&gt; URLs do not contain a slash at the end, so your URL patterns should not too. You can redirect GET requests to the right page with help or &lt;code class=&quot;language-html&quot;&gt;RedirectView&lt;/code&gt; if you need to:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from django.views.generic import RedirectView&#10; &#10;urlpatterns = [&#10;   # some other patterns&#10;   path('login/', RedirectView.as_view(url='/login'))&#10;   path('signup/', RedirectView.as_view(url='/signup'))&#10;]&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/94/stages/522/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8601" />
                      <option name="index" value="4" />
                      <option name="name" value="Authentication" />
                      <option name="record" value="4" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="hyperjob/vacancy/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;&#10;# Create your views here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/urls.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/hyperjob/urls.py" />
                                <option name="text" value="&quot;&quot;&quot;hyperjob URL Configuration&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/2.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.contrib import admin&#10;from django.urls import path&#10;&#10;urlpatterns = [&#10;    path('admin/', admin.site.urls),&#10;]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/wsgi.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/wsgi.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;WSGI config for hyperjob project.&#10;&#10;It exposes the WSGI callable as a module-level variable named ``application``.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;from django.core.wsgi import get_wsgi_application&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hyperjob.settings')&#10;&#10;application = get_wsgi_application()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/settings.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/hyperjob/settings.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;Django settings for hyperjob project.&#10;&#10;Generated by 'django-admin startproject' using Django 2.2.6.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/2.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = '*57#^8!%%x4wi6byh%qj3!&amp;7b)qu5ve7m5tz9&amp;)2^jievj2j1b'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;    'resume',&#10;    'vacancy',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'hyperjob.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'hyperjob.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': os.environ.get('HYPERSKILL_TEST_DATABASE') or os.path.join(BASE_DIR, 'db.sqlite3'),&#10;    }&#10;}&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/2.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_L10N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/2.2/howto/static-files/&#10;&#10;STATIC_URL = '/static/'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/manage.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/manage.py" />
                                <option name="text" value="#!/usr/bin/env python&#10;&quot;&quot;&quot;Django's command-line utility for administrative tasks.&quot;&quot;&quot;&#10;import os&#10;import sys&#10;&#10;&#10;def main():&#10;    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hyperjob.settings')&#10;    try:&#10;        from django.core.management import execute_from_command_line&#10;    except ImportError as exc:&#10;        raise ImportError(&#10;            &quot;Couldn't import Django. Are you sure it's installed and &quot;&#10;            &quot;available on your PYTHONPATH environment variable? Did you &quot;&#10;            &quot;forget to activate a virtual environment?&quot;&#10;        ) from exc&#10;    execute_from_command_line(sys.argv)&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class ResumeConfig(AppConfig):&#10;    name = 'resume'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;&#10;# Create your views here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class VacancyConfig(AppConfig):&#10;    name = 'vacancy'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from hstest.test_case import TestCase&#10;&#10;from base import HyperJobTest&#10;&#10;&#10;class HyperJobTestRunner(HyperJobTest):&#10;    def generate(self):&#10;        return [&#10;            # 1 task&#10;            TestCase(attach=self.check_server),&#10;            TestCase(attach=self.check_create_vacancies),&#10;            TestCase(attach=self.check_create_resumes),&#10;            # 2 task&#10;            TestCase(attach=self.check_greeting),&#10;            TestCase(attach=self.check_links),&#10;            # 3 task&#10;            TestCase(attach=self.check_vacancies),&#10;            TestCase(attach=self.check_resumes),&#10;            # 4 task&#10;            TestCase(attach=self.check_signup),&#10;            TestCase(attach=self.check_login),&#10;        ]&#10;&#10;    def check(self, reply, attach):&#10;        return attach()&#10;&#10;&#10;if __name__ == '__main__':&#10;    import os&#10;    os.environ['HYPERSKILL_TESTS_WITH_SQLITE3'] = '1'&#10;    HyperJobTestRunner('hyperjob.manage').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/check_result.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/check_result.py" />
                                <option name="text" value="class CheckResult:&#10;&#10;    def __init__(self, result: bool, feedback: str):&#10;        self.result = result&#10;        self.feedback = feedback&#10;&#10;    @staticmethod&#10;    def true():&#10;        return CheckResult(True, '')&#10;&#10;    @staticmethod&#10;    def false(feedback: str = ''):&#10;        return CheckResult(False, feedback)&#10;&#10;&#10;def wrong(feedback: str = '') -&gt; CheckResult:&#10;    return CheckResult.false(feedback)&#10;&#10;&#10;def accept():&#10;    return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/django_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/django_test.py" />
                                <option name="text" value="import os&#10;import shutil&#10;import signal&#10;import subprocess&#10;import sys&#10;from time import sleep&#10;from urllib.error import URLError, HTTPError&#10;from urllib.request import urlopen&#10;from hstest.stage_test import StageTest&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import UnexpectedErrorException&#10;&#10;&#10;EMPTY_DATABASE = 'empty.sqlite3'&#10;TEST_DATABASE = 'db.test.sqlite3'&#10;&#10;&#10;class DjangoTest(StageTest):&#10;    _kill = os.kill&#10;    port = '0'&#10;    tryout_ports = ['8000', '8001', '8002', '8003', '8004']&#10;    process = None&#10;&#10;    def run(self):&#10;        if self.process is None:&#10;            self.__find_free_port()&#10;            self.__prepare_database()&#10;            self.process = subprocess.Popen([&#10;                sys.executable, self.file_to_test,&#10;                'runserver', self.port, '--noreload',&#10;            ])&#10;&#10;    def __prepare_database(self):&#10;        if os.environ.get('HYPERSKILL_TESTS_WITH_SQLITE3'):&#10;            os.environ['HYPERSKILL_TEST_DATABASE'] = TEST_DATABASE&#10;            with open(TEST_DATABASE, 'w'):&#10;                pass&#10;            migrate = subprocess.Popen(&#10;                [sys.executable, self.file_to_test, 'migrate'],&#10;                stderr=subprocess.PIPE&#10;            )&#10;            exit_code = migrate.wait()&#10;            if exit_code != 0:&#10;                raise UnexpectedErrorException(migrate.stderr.read().decode())&#10;&#10;    def check_server(self):&#10;        if self.port == '0':&#10;            return CheckResult.false(&#10;                f'Please free one of the ports: {&quot;, &quot;.join(self.tryout_ports)}'&#10;            )&#10;&#10;        for _ in range(15):&#10;            try:&#10;                urlopen(f'http://localhost:{self.port}/not-existing-link-by-default')&#10;                return CheckResult.true()&#10;            except URLError as err:&#10;                if isinstance(err, HTTPError):&#10;                    return CheckResult.true()&#10;                sleep(1)&#10;        else:&#10;            return CheckResult.false(&#10;                'Cannot start the ./manage.py runserver for 15 seconds'&#10;            )&#10;&#10;    def __find_free_port(self):&#10;        for port in self.tryout_ports:&#10;            try:&#10;                urlopen(f'http://localhost:{port}')&#10;            except URLError as err:&#10;                if isinstance(err.reason, ConnectionRefusedError):&#10;                    self.port = port&#10;                    break&#10;            except ConnectionResetError:&#10;                pass&#10;&#10;    def read_page(self, link: str) -&gt; str:&#10;        return urlopen(link).read().decode().replace('\u00a0', ' ')&#10;&#10;    def after_all_tests(self):&#10;        if self.process is not None:&#10;            try:&#10;                self._kill(self.process.pid, signal.SIGINT)&#10;            except ProcessLookupError:&#10;                pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/exceptions.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/exceptions.py" />
                                <option name="text" value="&#10;class BadSolutionException(Exception):&#10;    def __init__(self, message):&#10;        self.message = message&#10;&#10;&#10;class SyntaxException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class ExitException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class UnexpectedErrorException(Exception):&#10;    pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/stage_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/stage_test.py" />
                                <option name="text" value="import sys&#10;import runpy&#10;import os&#10;import io&#10;import importlib&#10;import signal&#10;import builtins&#10;import traceback&#10;from typing import List, Any, Dict&#10;from hstest.test_helper import *&#10;from hstest.test_case import TestCase&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import *&#10;&#10;&#10;class StageTest:&#10;&#10;    real_stdin = None&#10;    real_print = None&#10;    real_input = None&#10;    user_output: io.StringIO = None&#10;&#10;    @staticmethod&#10;    def remove_kill_methods():&#10;        os.kill = lambda *x, **y: exit(0)&#10;        os._exit = lambda *x, **y: exit(0)&#10;        os.killpg = lambda *x, **y: exit(0)&#10;        signal.pthread_kill = lambda *x, **y: exit(0)&#10;        signal.siginterrupt = lambda *x, **y: exit(0)&#10;&#10;    @staticmethod&#10;    def set_input(user_input: str):&#10;        sys.stdin = io.StringIO(user_input)&#10;&#10;    @staticmethod&#10;    def add_input(user_input: str):&#10;        sys.stdin: io.StringIO&#10;        curr_position = sys.stdin.seek(0, io.SEEK_CUR)&#10;        sys.stdin.seek(0)&#10;        sys.stdin = io.StringIO(sys.stdin.read() + user_input)&#10;        sys.stdin.seek(curr_position)&#10;&#10;    @staticmethod&#10;    def print(*args, **kwargs):&#10;        StageTest.real_print(*args, **kwargs)&#10;        StageTest.real_print(*args, **kwargs, file=StageTest.user_output)&#10;&#10;    @staticmethod&#10;    def input(arg=''):&#10;        StageTest.print(arg, end='')&#10;        user_input = StageTest.real_input()&#10;        # StageTest.print()&#10;        return user_input&#10;&#10;    @staticmethod&#10;    def replace_globals():&#10;        StageTest.real_stdin = sys.stdin&#10;        StageTest.real_print = builtins.print&#10;        StageTest.real_input = builtins.input&#10;        builtins.print = StageTest.print&#10;        builtins.input = StageTest.input&#10;&#10;    @staticmethod&#10;    def get_print_back():&#10;        builtins.print = StageTest.real_print&#10;        sys.stdin = StageTest.real_stdin&#10;&#10;    def __init__(self, module_to_test: str):&#10;        self.remove_kill_methods()&#10;        self.replace_globals()&#10;        self.module_to_test = module_to_test&#10;        self.this_test_file = __file__&#10;        self.file_to_test = module_to_test.replace('.', os.sep) + '.py'&#10;        self.full_file_to_test = ''&#10;        self.tests: List[TestCase] = []&#10;&#10;    def reset(self):&#10;        StageTest.user_output = io.StringIO()&#10;        top_module = self.module_to_test[:self.module_to_test.index('.')]&#10;        for name, module in list(sys.modules.items()):&#10;            if name.startswith(top_module):&#10;                importlib.reload(module)&#10;&#10;    @staticmethod&#10;    def create_files(files: Dict[str, str]):&#10;        for file, content in files.items():&#10;            with open(file, 'w') as f:&#10;                f.write(content)&#10;&#10;    @staticmethod&#10;    def delete_files(files: Dict[str, str]):&#10;        for file in files.keys():&#10;            if os.path.isfile(file):&#10;                os.remove(file)&#10;&#10;    def run(self):&#10;        runpy.run_module(&#10;            self.module_to_test,&#10;            run_name=&quot;__main__&quot;&#10;        )&#10;&#10;    def test(self, test_case: TestCase) -&gt; str:&#10;        self.reset()&#10;        try:&#10;            self.create_files(test_case.files)&#10;            sys.argv = [self.file_to_test] + test_case.args&#10;            self.set_input(test_case.input)&#10;            self.run()&#10;            self.delete_files(test_case.files)&#10;            return StageTest.user_output.getvalue()&#10;&#10;        except SyntaxError as e:&#10;&#10;            file = e.filename&#10;            file = file.replace(os.sep, '.')&#10;            file = file[file.index(self.module_to_test):-3]&#10;            file = file.replace('.', os.sep) + '.py'&#10;&#10;            output = f'File &quot;{file}&quot;, line {e.lineno}\n' \&#10;                     + e.text.strip()[: e.offset-1] + '\n' \&#10;                     'SyntaxError: invalid syntax'&#10;&#10;            # '`' * (e.offset - 2) + '^'&#10;&#10;            raise SyntaxException(output)&#10;&#10;        except (SystemExit, KeyboardInterrupt):&#10;            raise ExitException('Tried to exit.')&#10;&#10;    def generate(self) -&gt; List[TestCase]:&#10;        raise NotImplemented&#10;&#10;    def check(self, reply: str, attach: Any) -&gt; CheckResult:&#10;        raise NotImplemented&#10;&#10;    def after_all_tests(self):&#10;        pass&#10;&#10;    def get_stacktrace(self, hide_internals, skipped_traces=0):&#10;&#10;        if self.full_file_to_test != '':&#10;            common_prefix = os.path.commonpath([&#10;                self.full_file_to_test, self.this_test_file&#10;            ])&#10;        else:&#10;            common_prefix = ''&#10;&#10;        exc_type, exc_obj, exc_tb = sys.exc_info()&#10;&#10;        if hide_internals and skipped_traces != 0:&#10;            traceback_msg = 'Traceback (most recent call last):\n'&#10;        else:&#10;            traceback_msg = ''&#10;&#10;        for line in traceback.TracebackException(&#10;                type(exc_obj), exc_obj, exc_tb, limit=None).format(chain=None):&#10;            if not hide_internals:&#10;                traceback_msg += line&#10;            elif skipped_traces &gt;= 0:&#10;                skipped_traces -= 1&#10;            elif self.this_test_file not in line:&#10;                traceback_msg += line.replace(common_prefix + os.sep, '')&#10;&#10;        return traceback_msg&#10;&#10;    def run_tests(self):&#10;&#10;        test_number = 0&#10;        try:&#10;            for test in self.generate():&#10;                test_number += 1&#10;                reply = self.test(test)&#10;                result = self.check(reply, test.attach)&#10;                if not result.result:&#10;                    fail_msg = f'Wrong answer in test #{test_number}'&#10;                    self.get_print_back()&#10;                    failed(fail_msg + '\n\n' + result.feedback)&#10;                    break&#10;            passed()&#10;&#10;        except SyntaxException as ex:&#10;            self.get_print_back()&#10;            failed(ex.message)&#10;&#10;        except ExitException as ex:&#10;            error_msg = f'Error in test #{test_number}'&#10;            self.get_print_back()&#10;            failed(error_msg + '\n\n' + ex.message)&#10;&#10;        except Exception:&#10;&#10;            exc_type, exc_obj, exc_tb = sys.exc_info()&#10;            trace_frames = []&#10;&#10;            user_trace_started = False&#10;            skipped_traces = 0&#10;            while exc_tb is not None:&#10;                code = exc_tb.tb_frame.f_code&#10;                filename = code.co_filename&#10;&#10;                if filename.endswith(self.file_to_test) and not user_trace_started:&#10;                    user_trace_started = True&#10;                    self.full_file_to_test = exc_tb.tb_frame.f_code.co_filename&#10;&#10;                if user_trace_started:&#10;                    trace_frames += [exc_tb.tb_frame.f_code]&#10;                else:&#10;                    skipped_traces += 1&#10;&#10;                exc_tb = exc_tb.tb_next&#10;&#10;            if not trace_frames:&#10;                exception_msg = (&#10;                        f&quot;Fatal error in test #{test_number}, &quot; +&#10;                        &quot;please send the report to Hyperskill team.&quot;&#10;                )&#10;                stacktrace = self.get_stacktrace(hide_internals=False)&#10;&#10;            else:&#10;                exception_msg = f'Exception in test #{test_number}'&#10;                stacktrace = self.get_stacktrace(&#10;                    hide_internals=True,&#10;                    skipped_traces=skipped_traces&#10;                )&#10;&#10;            self.get_print_back()&#10;            failed(exception_msg + '\n\n' + stacktrace)&#10;        finally:&#10;            self.after_all_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_case.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_case.py" />
                                <option name="text" value="from typing import List, Dict, Any, Tuple, Callable&#10;&#10;&#10;class TestCase:&#10;&#10;    def __init__(self, *, stdin='', args=None,&#10;                 attach=None, files=None, copy_to_attach=False,&#10;                 attach_callback=None):&#10;        self.input: str = stdin&#10;        self.args: List[str] = [] if args is None else args&#10;        self.attach: Any = attach&#10;        self.attach_callback: Callable = attach_callback&#10;        self.files: Dict[str, str] = {} if files is None else files&#10;        if copy_to_attach:&#10;            self.attach = stdin&#10;&#10;    @staticmethod&#10;    def from_stepik(stepik_tests: List[Tuple[str, Any]]) -&gt; List['TestCase']:&#10;        hs_tests = []&#10;        for test in stepik_tests:&#10;            hs_test = TestCase()&#10;            if type(test) in (list, tuple):&#10;                hs_test.input = test[0]&#10;                hs_test.attach = test[1]&#10;            elif type(test) is str:&#10;                hs_test.input = test&#10;            else:&#10;                raise ValueError(&quot;Bad test: &quot; + str(test))&#10;            hs_tests += [hs_test]&#10;        return hs_tests&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_helper.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_helper.py" />
                                <option name="text" value="&#10;def set_congratulation_message(message):&#10;    &quot;&quot;&quot; Overrides default 'Congratulations!' message &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin CONGRATS_MESSAGE &quot; + message)&#10;&#10;&#10;def failed(message: str):&#10;    &quot;&quot;&quot; Reports failure &quot;&quot;&quot;&#10;    lines = message.splitlines()&#10;    print(&quot;\n#educational_plugin FAILED + &quot; + lines[0])&#10;    for line in lines[1:]:&#10;        print(&quot;#educational_plugin &quot; + line)&#10;&#10;&#10;def passed():&#10;    &quot;&quot;&quot; Reports success &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin test OK&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="base.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="base.py" />
                                <option name="text" value="import http.cookiejar&#10;import re&#10;import urllib&#10;import sqlite3&#10;&#10;from hstest.django_test import DjangoTest, TEST_DATABASE&#10;from hstest.check_result import CheckResult&#10;&#10;&#10;INITIAL_USERS = [&#10;    (1, 'Lemon_2059', 'contemp2015@protonmail.com', True),&#10;    (2, 'RuthlessnessSirens-1882', 'oversured1842@yahoo.com', True),&#10;    (3, 'moping_1935', 'tenons1970@outlook.com', True),&#10;    (4, 'MillagePenstemon-1843', 'chrisman1923@yandex.com', True),&#10;    (5, 'Archeus.1930', 'concentric1895@gmail.com', True),&#10;    (6, 'BenzalazineCurite.1832', 'quassiin1927@live.com', True),&#10;    (7, 'Bossa-1831', 'breena1977@live.com', False),&#10;    (8, 'ClinkChinho_2027', 'adansonia1808@gmail.com', False),&#10;    (9, 'RepassableTournefortian.1973', 'vomer1822@yahoo.com', False),&#10;    (10, 'debenture-1898', 'average2014@yahoo.com', False),&#10;]&#10;&#10;INITIAL_VACANCIES = [&#10;    (1, 'Botanist'),&#10;    (2, 'Signwriter'),&#10;    (3, 'Stewardess'),&#10;    (4, 'Medical Secretary'),&#10;    (5, 'Stone Cutter'),&#10;    (6, 'Musician'),&#10;]&#10;&#10;INITIAL_RESUMES = [&#10;    (7, 'Charge Hand'),&#10;    (8, 'Occupations'),&#10;    (9, 'Milklady'),&#10;    (10, 'Auctioneer'),&#10;]&#10;&#10;&#10;class HyperJobTest(DjangoTest):&#10;    USERNAME = 'Sparrow_1949'&#10;    PASSWORD = 's&lt;myW8Dh'&#10;    OCCUPATION = 'Flower Arranger'&#10;&#10;    ELEMENT_PATTERN = '''&lt;a[^&gt;]+href=['&quot;](?P&lt;href&gt;[a-zA-Z/_]+)['&quot;][^&gt;]*&gt;'''&#10;    cookie_jar = http.cookiejar.CookieJar()&#10;&#10;    def check_create_resume_from_profile(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/home')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the home page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.false('Missing csrf_token in the form')&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/resume/new',&#10;                data=urllib.parse.urlencode({&#10;                    'description': self.OCCUPATION,&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;        except urllib.error.URLError as err:&#10;            return CheckResult.false(f'Cannot create resume: {err.reason}')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/resumes')&#10;            description = f'{self.USERNAME}: {self.OCCUPATION}'&#10;            if description not in page:&#10;                return CheckResult.false(&#10;                    f'Resumes page does not contain newly created resume'&#10;                )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the resumes page.')&#10;&#10;    def check_create_resumes(self) -&gt; CheckResult:&#10;        connection = sqlite3.connect(TEST_DATABASE)&#10;        cursor = connection.cursor()&#10;        try:&#10;            cursor.executemany(&#10;                'INSERT INTO auth_user '&#10;                '(`id`, `username`, `email`, `is_staff`, `password`, `is_superuser`, '&#10;                '`first_name`, `last_name`, `is_active`, `date_joined`) '&#10;                'VALUES (?, ?, ?, ?, &quot;&quot;, 0, &quot;&quot;, &quot;&quot;, 1, datetime())',&#10;                INITIAL_USERS[len(INITIAL_VACANCIES):]&#10;            )&#10;            cursor.executemany(&#10;                'INSERT INTO resume_resume (`author_id`, `description`) VALUES (?, ?)',&#10;                INITIAL_RESUMES&#10;            )&#10;            connection.commit()&#10;&#10;            cursor.execute('SELECT `author_id`, `description` FROM resume_resume')&#10;            result = cursor.fetchall()&#10;&#10;            for item in INITIAL_RESUMES:&#10;                if item not in result:&#10;                    return CheckResult.false('Check your Resume model')&#10;            return CheckResult.true()&#10;&#10;        except sqlite3.DatabaseError as err:&#10;            return CheckResult.false(str(err))&#10;&#10;    def check_create_vacancies(self) -&gt; CheckResult:&#10;        connection = sqlite3.connect(TEST_DATABASE)&#10;        cursor = connection.cursor()&#10;        try:&#10;            cursor.executemany(&#10;                'INSERT INTO auth_user '&#10;                '(`id`, `username`, `email`, `is_staff`, `password`, `is_superuser`, '&#10;                '`first_name`, `last_name`, `is_active`, `date_joined`) '&#10;                'VALUES (?, ?, ?, ?, &quot;&quot;, 0, &quot;&quot;, &quot;&quot;, 1, datetime())',&#10;                INITIAL_USERS[:len(INITIAL_VACANCIES)]&#10;            )&#10;            cursor.executemany(&#10;                'INSERT INTO vacancy_vacancy (`author_id`, `description`) VALUES (?, ?)',&#10;                INITIAL_VACANCIES&#10;            )&#10;            connection.commit()&#10;&#10;            cursor.execute('SELECT `author_id`, `description` FROM vacancy_vacancy')&#10;            result = cursor.fetchall()&#10;&#10;            for item in INITIAL_VACANCIES:&#10;                if item not in result:&#10;                    return CheckResult.false('Check your Vacancy model')&#10;            return CheckResult.true()&#10;&#10;        except sqlite3.DatabaseError as err:&#10;            return CheckResult.false(str(err))&#10;&#10;    def check_forbid_anonymous_create(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener()&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/home')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the home page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.true()&#10;&#10;        OTHER_OCCUPATION = 'Marketing Coordinator'&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/resume/new',&#10;                data=urllib.parse.urlencode({&#10;                    'description': OTHER_OCCUPATION,&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;            return CheckResult.false('Should not allow anonymous users create resumes')&#10;        except urllib.error.URLError as err:&#10;            if 'Forbidden' not in err.reason:&#10;                return CheckResult.false(f'Wrong response for forbidden requests: {err.reason}')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/resumes')&#10;            if OTHER_OCCUPATION in page:&#10;                return CheckResult.false(&#10;                    f'Resumes page should not contain resumes from anonymous users'&#10;                )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the resumes page.')&#10;&#10;    def check_forbid_to_create_vacancy(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/home')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the home page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.true()&#10;&#10;        OTHER_OCCUPATION = 'Marketing Coordinator'&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/vacancy/new',&#10;                data=urllib.parse.urlencode({&#10;                    'description': OTHER_OCCUPATION,&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;            return CheckResult.false('Should not allow usual users create vacancies')&#10;        except urllib.error.URLError as err:&#10;            if 'Forbidden' not in err.reason:&#10;                return CheckResult.false(f'Wrong response for forbidden requests: {err.reason}')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/vacancies')&#10;            if OTHER_OCCUPATION in page:&#10;                return CheckResult.false(&#10;                    f'Vacancies page should not contain vacancies from usual users'&#10;                )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the vacancies page.')&#10;&#10;    def check_greeting(self) -&gt; CheckResult:&#10;        try:&#10;            main_page = self.read_page(f'http://localhost:{self.port}')&#10;            if 'Welcome to HyperJob!' in main_page:&#10;                return CheckResult.true()&#10;            return CheckResult.false(&#10;                'Main page should contain &quot;Welcome to HyperJob!&quot; line'&#10;            )&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the menu page.'&#10;            )&#10;&#10;    def check_links(self) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}')&#10;            links = re.findall(self.ELEMENT_PATTERN, page)&#10;            for link in (&#10;                '/login',&#10;                '/signup',&#10;                '/vacancies',&#10;                '/resumes',&#10;                '/home',&#10;            ):&#10;                if link not in links:&#10;                    return CheckResult.false(&#10;                        f'Menu page should contain &lt;a&gt; element with href {link}'&#10;                    )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the menu page.'&#10;            )&#10;&#10;    def check_login(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/login')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the login page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.false('Missing csrf_token in the form')&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/login',&#10;                data=urllib.parse.urlencode({&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                    'username': self.USERNAME,&#10;                    'password': self.PASSWORD,&#10;                }).encode()&#10;            )&#10;            if 'login' not in response.url:&#10;                return CheckResult.true()&#10;            return CheckResult.false('Cannot login: problems with form')&#10;        except urllib.error.URLError as err:&#10;            return CheckResult.false(f'Cannot login: {err.reason}')&#10;&#10;    def check_resumes(self) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/resumes')&#10;            for person, resume in zip(INITIAL_USERS[len(INITIAL_VACANCIES):], INITIAL_RESUMES):&#10;                description = f'{person[1]}: {resume[1]}'&#10;                if description not in page:&#10;                    return CheckResult.false(&#10;                        f'Resumes page should contain resumes in form &lt;username&gt;: &lt;description&gt;'&#10;                    )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the resumes page.'&#10;            )&#10;&#10;    def check_signup(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar)&#10;        )&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/signup')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the signup page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.false('Missing csrf_token in the form')&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/signup',&#10;                data=urllib.parse.urlencode({&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                    'username': self.USERNAME,&#10;                    'password1': self.PASSWORD,&#10;                    'password2': self.PASSWORD,&#10;                }).encode()&#10;            )&#10;            if f'login' in response.url:&#10;                return CheckResult.true()&#10;            return CheckResult.false('Cannot signup: problems with form')&#10;        except urllib.error.URLError as err:&#10;            return CheckResult.false(f'Cannot signup: {err.reason}')&#10;&#10;    def check_vacancies(self) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/vacancies')&#10;            for person, vacancy in zip(INITIAL_USERS, INITIAL_VACANCIES):&#10;                description = f'{person[1]}: {vacancy[1]}'&#10;                if description not in page:&#10;                    return CheckResult.false(&#10;                        f'Vacancies page should contain vacancies in form &lt;username&gt;: &lt;description&gt;'&#10;                    )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the vacancies page.'&#10;            )&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/templates/resume/resumes.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/templates/resume/resumes.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Resumes&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    {% for obj in objects %}&#10;    &lt;div&gt;{{obj.author}}: {{obj.description}}&lt;/div&gt;&#10;    {% endfor %}&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/migrations/0001_initial.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/migrations/0001_initial.py" />
                                <option name="text" value="# Generated by Django 2.2 on 2020-07-18 13:50&#10;&#10;from django.conf import settings&#10;from django.db import migrations, models&#10;import django.db.models.deletion&#10;&#10;&#10;class Migration(migrations.Migration):&#10;&#10;    initial = True&#10;&#10;    dependencies = [&#10;        migrations.swappable_dependency(settings.AUTH_USER_MODEL),&#10;    ]&#10;&#10;    operations = [&#10;        migrations.CreateModel(&#10;            name='Vacancy',&#10;            fields=[&#10;                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),&#10;                ('description', models.TextField(max_length=1024)),&#10;                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),&#10;            ],&#10;        ),&#10;    ]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/migrations/0001_initial.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/migrations/0001_initial.py" />
                                <option name="text" value="# Generated by Django 2.2 on 2020-07-18 13:50&#10;&#10;from django.conf import settings&#10;from django.db import migrations, models&#10;import django.db.models.deletion&#10;&#10;&#10;class Migration(migrations.Migration):&#10;&#10;    initial = True&#10;&#10;    dependencies = [&#10;        migrations.swappable_dependency(settings.AUTH_USER_MODEL),&#10;    ]&#10;&#10;    operations = [&#10;        migrations.CreateModel(&#10;            name='Resume',&#10;            fields=[&#10;                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),&#10;                ('description', models.TextField(max_length=1024)),&#10;                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),&#10;            ],&#10;        ),&#10;    ]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/templates/vacancy/vacancies.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/templates/vacancy/vacancies.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Vacancies&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    {% for obj in objects %}&#10;    &lt;div&gt;{{obj.author}}: {{obj.description}}&lt;/div&gt;&#10;    {% endfor %}&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/templates/hyperjob/main.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/templates/hyperjob/main.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Main&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;h2&gt;Welcome to HyperJob!&lt;/h2&gt;&#10;    &lt;div&gt;&lt;a href=&quot;/login&quot;&gt;Login&lt;/a&gt;&lt;/div&gt;&#10;    &lt;div&gt;&lt;a href=&quot;/signup&quot;&gt;Signup&lt;/a&gt;&lt;/div&gt;&#10;    &lt;div&gt;&lt;a href=&quot;/vacancies&quot;&gt;Vacancies&lt;/a&gt;&lt;/div&gt;&#10;    &lt;div&gt;&lt;a href=&quot;/resumes&quot;&gt;Resumes&lt;/a&gt;&lt;/div&gt;&#10;    &lt;div&gt;&lt;a href=&quot;/home&quot;&gt;Home&lt;/a&gt;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/hyperjob/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;from django.views import View&#10;&#10;&#10;# Create your views here.&#10;class MainView(View):&#10;    def get(self, request, *args, **kwargs):&#10;        return render(request, 'hyperjob/main.html', {})&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/templates/hyperjob/signup.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/hyperjob/templates/hyperjob/signup.html" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/templates/hyperjob/login.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/hyperjob/templates/hyperjob/login.html" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage5" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;You've made an authentication for the service, but the users still do not have profile pages where they can publish their resumes. This page will allow the users to find a job they like.&lt;/p&gt;&#10;&#10;&lt;p&gt;This is the last stage, and the company highly appreciates your participation in the project.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;Your task is to add handlers for creating vacancies and resumes. We need to make a new page for a user profile. On this page, there will be two handlers to create new resumes and vacancies. Only the managers create vacancies, and only the candidates can create resumes. When a user creates a new item, it should appear on the appropriate page.&lt;/p&gt;&#10;&#10;&lt;p&gt;How can we distinguish managers from users? The &lt;code class=&quot;java&quot;&gt;django.contrib.auth.models.User&lt;/code&gt; has a boolean field &lt;code class=&quot;java&quot;&gt;is_staff&lt;/code&gt;. If an authenticated user is a member of staff, this user is a manager. Otherwise, the user is a candidate. Not authenticated users are not allowed to create vacancies and resumes at all. To check if a user is authenticated you can use &lt;code class=&quot;java&quot;&gt;request.user.is_authenticated&lt;/code&gt; property in your handler.&lt;/p&gt;&#10;&#10;&lt;p&gt;You can use an HTML form or define form with Django forms if you want. The form for creation vacancies or resumes should be on the profile page. The main requirement is that the handlers should receive only one &lt;em&gt;POST&lt;/em&gt; parameter: &lt;code class=&quot;java&quot;&gt;description&lt;/code&gt;. That's enough to create a new item.&lt;/p&gt;&#10;&#10;&lt;p&gt;If a request is successful, redirect the user back to their profile; otherwise, respond with &lt;strong&gt;403(Forbidden)&lt;/strong&gt; status code.&lt;/p&gt;&#10;&#10;&lt;p&gt;If you start the application on your computer with the &lt;code class=&quot;java&quot;&gt;python manage.py runserver&lt;/code&gt; command, the profile page should be available at  &lt;em&gt;localhost:8000/home&lt;/em&gt;, a new resume can be created at &lt;em&gt;localhost:8000/resume/new&lt;/em&gt;, and a new vacancy at &lt;em&gt;localhost:8000/vacancy/new&lt;/em&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;div class=&quot;alert alert-warning&quot;&gt; Do not forget to use &lt;em&gt;POST&lt;/em&gt; handlers for the creation of resumes and vacancies. &lt;/div&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/94/stages/523/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="8602" />
                      <option name="index" value="5" />
                      <option name="name" value="Creating new vacancies and resumes" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="hyperjob/vacancy/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;&#10;# Create your views here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/urls.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/hyperjob/urls.py" />
                                <option name="text" value="&quot;&quot;&quot;hyperjob URL Configuration&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/2.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.contrib import admin&#10;from django.urls import path&#10;&#10;urlpatterns = [&#10;    path('admin/', admin.site.urls),&#10;]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/wsgi.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/wsgi.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;WSGI config for hyperjob project.&#10;&#10;It exposes the WSGI callable as a module-level variable named ``application``.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;from django.core.wsgi import get_wsgi_application&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hyperjob.settings')&#10;&#10;application = get_wsgi_application()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/settings.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/settings.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;Django settings for hyperjob project.&#10;&#10;Generated by 'django-admin startproject' using Django 2.2.6.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/2.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = '*57#^8!%%x4wi6byh%qj3!&amp;7b)qu5ve7m5tz9&amp;)2^jievj2j1b'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;    'resume',&#10;    'vacancy',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'hyperjob.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'hyperjob.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': os.environ.get('HYPERSKILL_TEST_DATABASE') or os.path.join(BASE_DIR, 'db.sqlite3'),&#10;    }&#10;}&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/2.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_L10N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/2.2/howto/static-files/&#10;&#10;STATIC_URL = '/static/'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/manage.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/manage.py" />
                                <option name="text" value="#!/usr/bin/env python&#10;&quot;&quot;&quot;Django's command-line utility for administrative tasks.&quot;&quot;&quot;&#10;import os&#10;import sys&#10;&#10;&#10;def main():&#10;    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hyperjob.settings')&#10;    try:&#10;        from django.core.management import execute_from_command_line&#10;    except ImportError as exc:&#10;        raise ImportError(&#10;            &quot;Couldn't import Django. Are you sure it's installed and &quot;&#10;            &quot;available on your PYTHONPATH environment variable? Did you &quot;&#10;            &quot;forget to activate a virtual environment?&quot;&#10;        ) from exc&#10;    execute_from_command_line(sys.argv)&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class ResumeConfig(AppConfig):&#10;    name = 'resume'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;&#10;# Create your views here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class VacancyConfig(AppConfig):&#10;    name = 'vacancy'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from hstest.test_case import TestCase&#10;&#10;from base import HyperJobTest&#10;&#10;&#10;class HyperJobTestRunner(HyperJobTest):&#10;    def generate(self):&#10;        return [&#10;            # 1 task&#10;            TestCase(attach=self.check_server),&#10;            TestCase(attach=self.check_create_vacancies),&#10;            TestCase(attach=self.check_create_resumes),&#10;            # 2 task&#10;            TestCase(attach=self.check_greeting),&#10;            TestCase(attach=self.check_links),&#10;            # 3 task&#10;            TestCase(attach=self.check_vacancies),&#10;            TestCase(attach=self.check_resumes),&#10;            # 4 task&#10;            TestCase(attach=self.check_signup),&#10;            TestCase(attach=self.check_login),&#10;            # 5 task&#10;            TestCase(attach=self.check_create_resume_from_profile),&#10;            TestCase(attach=self.check_forbid_to_create_vacancy),&#10;            TestCase(attach=self.check_forbid_anonymous_create),&#10;        ]&#10;&#10;    def check(self, reply, attach):&#10;        return attach()&#10;&#10;&#10;if __name__ == '__main__':&#10;    import os&#10;    os.environ['HYPERSKILL_TESTS_WITH_SQLITE3'] = '1'&#10;    HyperJobTestRunner('hyperjob.manage').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/check_result.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/check_result.py" />
                                <option name="text" value="class CheckResult:&#10;&#10;    def __init__(self, result: bool, feedback: str):&#10;        self.result = result&#10;        self.feedback = feedback&#10;&#10;    @staticmethod&#10;    def true():&#10;        return CheckResult(True, '')&#10;&#10;    @staticmethod&#10;    def false(feedback: str = ''):&#10;        return CheckResult(False, feedback)&#10;&#10;&#10;def wrong(feedback: str = '') -&gt; CheckResult:&#10;    return CheckResult.false(feedback)&#10;&#10;&#10;def accept():&#10;    return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/django_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/django_test.py" />
                                <option name="text" value="import os&#10;import shutil&#10;import signal&#10;import subprocess&#10;import sys&#10;from time import sleep&#10;from urllib.error import URLError, HTTPError&#10;from urllib.request import urlopen&#10;from hstest.stage_test import StageTest&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import UnexpectedErrorException&#10;&#10;&#10;EMPTY_DATABASE = 'empty.sqlite3'&#10;TEST_DATABASE = 'db.test.sqlite3'&#10;&#10;&#10;class DjangoTest(StageTest):&#10;    _kill = os.kill&#10;    port = '0'&#10;    tryout_ports = ['8000', '8001', '8002', '8003', '8004']&#10;    process = None&#10;&#10;    def run(self):&#10;        if self.process is None:&#10;            self.__find_free_port()&#10;            self.__prepare_database()&#10;            self.process = subprocess.Popen([&#10;                sys.executable, self.file_to_test,&#10;                'runserver', self.port, '--noreload',&#10;            ])&#10;&#10;    def __prepare_database(self):&#10;        if os.environ.get('HYPERSKILL_TESTS_WITH_SQLITE3'):&#10;            os.environ['HYPERSKILL_TEST_DATABASE'] = TEST_DATABASE&#10;            with open(TEST_DATABASE, 'w'):&#10;                pass&#10;            migrate = subprocess.Popen(&#10;                [sys.executable, self.file_to_test, 'migrate'],&#10;                stderr=subprocess.PIPE&#10;            )&#10;            exit_code = migrate.wait()&#10;            if exit_code != 0:&#10;                raise UnexpectedErrorException(migrate.stderr.read().decode())&#10;&#10;    def check_server(self):&#10;        if self.port == '0':&#10;            return CheckResult.false(&#10;                f'Please free one of the ports: {&quot;, &quot;.join(self.tryout_ports)}'&#10;            )&#10;&#10;        for _ in range(15):&#10;            try:&#10;                urlopen(f'http://localhost:{self.port}/not-existing-link-by-default')&#10;                return CheckResult.true()&#10;            except URLError as err:&#10;                if isinstance(err, HTTPError):&#10;                    return CheckResult.true()&#10;                sleep(1)&#10;        else:&#10;            return CheckResult.false(&#10;                'Cannot start the ./manage.py runserver for 15 seconds'&#10;            )&#10;&#10;    def __find_free_port(self):&#10;        for port in self.tryout_ports:&#10;            try:&#10;                urlopen(f'http://localhost:{port}')&#10;            except URLError as err:&#10;                if isinstance(err.reason, ConnectionRefusedError):&#10;                    self.port = port&#10;                    break&#10;            except ConnectionResetError:&#10;                pass&#10;&#10;    def read_page(self, link: str) -&gt; str:&#10;        return urlopen(link).read().decode().replace('\u00a0', ' ')&#10;&#10;    def after_all_tests(self):&#10;        if self.process is not None:&#10;            try:&#10;                self._kill(self.process.pid, signal.SIGINT)&#10;            except ProcessLookupError:&#10;                pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/exceptions.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/exceptions.py" />
                                <option name="text" value="&#10;class BadSolutionException(Exception):&#10;    def __init__(self, message):&#10;        self.message = message&#10;&#10;&#10;class SyntaxException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class ExitException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class UnexpectedErrorException(Exception):&#10;    pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/stage_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/stage_test.py" />
                                <option name="text" value="import sys&#10;import runpy&#10;import os&#10;import io&#10;import importlib&#10;import signal&#10;import builtins&#10;import traceback&#10;from typing import List, Any, Dict&#10;from hstest.test_helper import *&#10;from hstest.test_case import TestCase&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import *&#10;&#10;&#10;class StageTest:&#10;&#10;    real_stdin = None&#10;    real_print = None&#10;    real_input = None&#10;    user_output: io.StringIO = None&#10;&#10;    @staticmethod&#10;    def remove_kill_methods():&#10;        os.kill = lambda *x, **y: exit(0)&#10;        os._exit = lambda *x, **y: exit(0)&#10;        os.killpg = lambda *x, **y: exit(0)&#10;        signal.pthread_kill = lambda *x, **y: exit(0)&#10;        signal.siginterrupt = lambda *x, **y: exit(0)&#10;&#10;    @staticmethod&#10;    def set_input(user_input: str):&#10;        sys.stdin = io.StringIO(user_input)&#10;&#10;    @staticmethod&#10;    def add_input(user_input: str):&#10;        sys.stdin: io.StringIO&#10;        curr_position = sys.stdin.seek(0, io.SEEK_CUR)&#10;        sys.stdin.seek(0)&#10;        sys.stdin = io.StringIO(sys.stdin.read() + user_input)&#10;        sys.stdin.seek(curr_position)&#10;&#10;    @staticmethod&#10;    def print(*args, **kwargs):&#10;        StageTest.real_print(*args, **kwargs)&#10;        StageTest.real_print(*args, **kwargs, file=StageTest.user_output)&#10;&#10;    @staticmethod&#10;    def input(arg=''):&#10;        StageTest.print(arg, end='')&#10;        user_input = StageTest.real_input()&#10;        # StageTest.print()&#10;        return user_input&#10;&#10;    @staticmethod&#10;    def replace_globals():&#10;        StageTest.real_stdin = sys.stdin&#10;        StageTest.real_print = builtins.print&#10;        StageTest.real_input = builtins.input&#10;        builtins.print = StageTest.print&#10;        builtins.input = StageTest.input&#10;&#10;    @staticmethod&#10;    def get_print_back():&#10;        builtins.print = StageTest.real_print&#10;        sys.stdin = StageTest.real_stdin&#10;&#10;    def __init__(self, module_to_test: str):&#10;        self.remove_kill_methods()&#10;        self.replace_globals()&#10;        self.module_to_test = module_to_test&#10;        self.this_test_file = __file__&#10;        self.file_to_test = module_to_test.replace('.', os.sep) + '.py'&#10;        self.full_file_to_test = ''&#10;        self.tests: List[TestCase] = []&#10;&#10;    def reset(self):&#10;        StageTest.user_output = io.StringIO()&#10;        top_module = self.module_to_test[:self.module_to_test.index('.')]&#10;        for name, module in list(sys.modules.items()):&#10;            if name.startswith(top_module):&#10;                importlib.reload(module)&#10;&#10;    @staticmethod&#10;    def create_files(files: Dict[str, str]):&#10;        for file, content in files.items():&#10;            with open(file, 'w') as f:&#10;                f.write(content)&#10;&#10;    @staticmethod&#10;    def delete_files(files: Dict[str, str]):&#10;        for file in files.keys():&#10;            if os.path.isfile(file):&#10;                os.remove(file)&#10;&#10;    def run(self):&#10;        runpy.run_module(&#10;            self.module_to_test,&#10;            run_name=&quot;__main__&quot;&#10;        )&#10;&#10;    def test(self, test_case: TestCase) -&gt; str:&#10;        self.reset()&#10;        try:&#10;            self.create_files(test_case.files)&#10;            sys.argv = [self.file_to_test] + test_case.args&#10;            self.set_input(test_case.input)&#10;            self.run()&#10;            self.delete_files(test_case.files)&#10;            return StageTest.user_output.getvalue()&#10;&#10;        except SyntaxError as e:&#10;&#10;            file = e.filename&#10;            file = file.replace(os.sep, '.')&#10;            file = file[file.index(self.module_to_test):-3]&#10;            file = file.replace('.', os.sep) + '.py'&#10;&#10;            output = f'File &quot;{file}&quot;, line {e.lineno}\n' \&#10;                     + e.text.strip()[: e.offset-1] + '\n' \&#10;                     'SyntaxError: invalid syntax'&#10;&#10;            # '`' * (e.offset - 2) + '^'&#10;&#10;            raise SyntaxException(output)&#10;&#10;        except (SystemExit, KeyboardInterrupt):&#10;            raise ExitException('Tried to exit.')&#10;&#10;    def generate(self) -&gt; List[TestCase]:&#10;        raise NotImplemented&#10;&#10;    def check(self, reply: str, attach: Any) -&gt; CheckResult:&#10;        raise NotImplemented&#10;&#10;    def after_all_tests(self):&#10;        pass&#10;&#10;    def get_stacktrace(self, hide_internals, skipped_traces=0):&#10;&#10;        if self.full_file_to_test != '':&#10;            common_prefix = os.path.commonpath([&#10;                self.full_file_to_test, self.this_test_file&#10;            ])&#10;        else:&#10;            common_prefix = ''&#10;&#10;        exc_type, exc_obj, exc_tb = sys.exc_info()&#10;&#10;        if hide_internals and skipped_traces != 0:&#10;            traceback_msg = 'Traceback (most recent call last):\n'&#10;        else:&#10;            traceback_msg = ''&#10;&#10;        for line in traceback.TracebackException(&#10;                type(exc_obj), exc_obj, exc_tb, limit=None).format(chain=None):&#10;            if not hide_internals:&#10;                traceback_msg += line&#10;            elif skipped_traces &gt;= 0:&#10;                skipped_traces -= 1&#10;            elif self.this_test_file not in line:&#10;                traceback_msg += line.replace(common_prefix + os.sep, '')&#10;&#10;        return traceback_msg&#10;&#10;    def run_tests(self):&#10;&#10;        test_number = 0&#10;        try:&#10;            for test in self.generate():&#10;                test_number += 1&#10;                reply = self.test(test)&#10;                result = self.check(reply, test.attach)&#10;                if not result.result:&#10;                    fail_msg = f'Wrong answer in test #{test_number}'&#10;                    self.get_print_back()&#10;                    failed(fail_msg + '\n\n' + result.feedback)&#10;                    break&#10;            passed()&#10;&#10;        except SyntaxException as ex:&#10;            self.get_print_back()&#10;            failed(ex.message)&#10;&#10;        except ExitException as ex:&#10;            error_msg = f'Error in test #{test_number}'&#10;            self.get_print_back()&#10;            failed(error_msg + '\n\n' + ex.message)&#10;&#10;        except Exception:&#10;&#10;            exc_type, exc_obj, exc_tb = sys.exc_info()&#10;            trace_frames = []&#10;&#10;            user_trace_started = False&#10;            skipped_traces = 0&#10;            while exc_tb is not None:&#10;                code = exc_tb.tb_frame.f_code&#10;                filename = code.co_filename&#10;&#10;                if filename.endswith(self.file_to_test) and not user_trace_started:&#10;                    user_trace_started = True&#10;                    self.full_file_to_test = exc_tb.tb_frame.f_code.co_filename&#10;&#10;                if user_trace_started:&#10;                    trace_frames += [exc_tb.tb_frame.f_code]&#10;                else:&#10;                    skipped_traces += 1&#10;&#10;                exc_tb = exc_tb.tb_next&#10;&#10;            if not trace_frames:&#10;                exception_msg = (&#10;                        f&quot;Fatal error in test #{test_number}, &quot; +&#10;                        &quot;please send the report to Hyperskill team.&quot;&#10;                )&#10;                stacktrace = self.get_stacktrace(hide_internals=False)&#10;&#10;            else:&#10;                exception_msg = f'Exception in test #{test_number}'&#10;                stacktrace = self.get_stacktrace(&#10;                    hide_internals=True,&#10;                    skipped_traces=skipped_traces&#10;                )&#10;&#10;            self.get_print_back()&#10;            failed(exception_msg + '\n\n' + stacktrace)&#10;        finally:&#10;            self.after_all_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_case.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_case.py" />
                                <option name="text" value="from typing import List, Dict, Any, Tuple, Callable&#10;&#10;&#10;class TestCase:&#10;&#10;    def __init__(self, *, stdin='', args=None,&#10;                 attach=None, files=None, copy_to_attach=False,&#10;                 attach_callback=None):&#10;        self.input: str = stdin&#10;        self.args: List[str] = [] if args is None else args&#10;        self.attach: Any = attach&#10;        self.attach_callback: Callable = attach_callback&#10;        self.files: Dict[str, str] = {} if files is None else files&#10;        if copy_to_attach:&#10;            self.attach = stdin&#10;&#10;    @staticmethod&#10;    def from_stepik(stepik_tests: List[Tuple[str, Any]]) -&gt; List['TestCase']:&#10;        hs_tests = []&#10;        for test in stepik_tests:&#10;            hs_test = TestCase()&#10;            if type(test) in (list, tuple):&#10;                hs_test.input = test[0]&#10;                hs_test.attach = test[1]&#10;            elif type(test) is str:&#10;                hs_test.input = test&#10;            else:&#10;                raise ValueError(&quot;Bad test: &quot; + str(test))&#10;            hs_tests += [hs_test]&#10;        return hs_tests&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_helper.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_helper.py" />
                                <option name="text" value="&#10;def set_congratulation_message(message):&#10;    &quot;&quot;&quot; Overrides default 'Congratulations!' message &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin CONGRATS_MESSAGE &quot; + message)&#10;&#10;&#10;def failed(message: str):&#10;    &quot;&quot;&quot; Reports failure &quot;&quot;&quot;&#10;    lines = message.splitlines()&#10;    print(&quot;\n#educational_plugin FAILED + &quot; + lines[0])&#10;    for line in lines[1:]:&#10;        print(&quot;#educational_plugin &quot; + line)&#10;&#10;&#10;def passed():&#10;    &quot;&quot;&quot; Reports success &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin test OK&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="base.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="base.py" />
                                <option name="text" value="import http.cookiejar&#10;import re&#10;import urllib&#10;import sqlite3&#10;&#10;from hstest.django_test import DjangoTest, TEST_DATABASE&#10;from hstest.check_result import CheckResult&#10;&#10;&#10;INITIAL_USERS = [&#10;    (1, 'Lemon_2059', 'contemp2015@protonmail.com', True),&#10;    (2, 'RuthlessnessSirens-1882', 'oversured1842@yahoo.com', True),&#10;    (3, 'moping_1935', 'tenons1970@outlook.com', True),&#10;    (4, 'MillagePenstemon-1843', 'chrisman1923@yandex.com', True),&#10;    (5, 'Archeus.1930', 'concentric1895@gmail.com', True),&#10;    (6, 'BenzalazineCurite.1832', 'quassiin1927@live.com', True),&#10;    (7, 'Bossa-1831', 'breena1977@live.com', False),&#10;    (8, 'ClinkChinho_2027', 'adansonia1808@gmail.com', False),&#10;    (9, 'RepassableTournefortian.1973', 'vomer1822@yahoo.com', False),&#10;    (10, 'debenture-1898', 'average2014@yahoo.com', False),&#10;]&#10;&#10;INITIAL_VACANCIES = [&#10;    (1, 'Botanist'),&#10;    (2, 'Signwriter'),&#10;    (3, 'Stewardess'),&#10;    (4, 'Medical Secretary'),&#10;    (5, 'Stone Cutter'),&#10;    (6, 'Musician'),&#10;]&#10;&#10;INITIAL_RESUMES = [&#10;    (7, 'Charge Hand'),&#10;    (8, 'Occupations'),&#10;    (9, 'Milklady'),&#10;    (10, 'Auctioneer'),&#10;]&#10;&#10;&#10;class HyperJobTest(DjangoTest):&#10;    USERNAME = 'Sparrow_1949'&#10;    PASSWORD = 's&lt;myW8Dh'&#10;    OCCUPATION = 'Flower Arranger'&#10;&#10;    ELEMENT_PATTERN = '''&lt;a[^&gt;]+href=['&quot;](?P&lt;href&gt;[a-zA-Z/_]+)['&quot;][^&gt;]*&gt;'''&#10;    cookie_jar = http.cookiejar.CookieJar()&#10;&#10;    def check_create_resume_from_profile(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/home')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the home page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.false('Missing csrf_token in the form')&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/resume/new',&#10;                data=urllib.parse.urlencode({&#10;                    'description': self.OCCUPATION,&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;        except urllib.error.URLError as err:&#10;            return CheckResult.false(f'Cannot create resume: {err.reason}')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/resumes')&#10;            description = f'{self.USERNAME}: {self.OCCUPATION}'&#10;            if description not in page:&#10;                return CheckResult.false(&#10;                    f'Resumes page does not contain newly created resume'&#10;                )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the resumes page.')&#10;&#10;    def check_create_resumes(self) -&gt; CheckResult:&#10;        connection = sqlite3.connect(TEST_DATABASE)&#10;        cursor = connection.cursor()&#10;        try:&#10;            cursor.executemany(&#10;                'INSERT INTO auth_user '&#10;                '(`id`, `username`, `email`, `is_staff`, `password`, `is_superuser`, '&#10;                '`first_name`, `last_name`, `is_active`, `date_joined`) '&#10;                'VALUES (?, ?, ?, ?, &quot;&quot;, 0, &quot;&quot;, &quot;&quot;, 1, datetime())',&#10;                INITIAL_USERS[len(INITIAL_VACANCIES):]&#10;            )&#10;            cursor.executemany(&#10;                'INSERT INTO resume_resume (`author_id`, `description`) VALUES (?, ?)',&#10;                INITIAL_RESUMES&#10;            )&#10;            connection.commit()&#10;&#10;            cursor.execute('SELECT `author_id`, `description` FROM resume_resume')&#10;            result = cursor.fetchall()&#10;&#10;            for item in INITIAL_RESUMES:&#10;                if item not in result:&#10;                    return CheckResult.false('Check your Resume model')&#10;            return CheckResult.true()&#10;&#10;        except sqlite3.DatabaseError as err:&#10;            return CheckResult.false(str(err))&#10;&#10;    def check_create_vacancies(self) -&gt; CheckResult:&#10;        connection = sqlite3.connect(TEST_DATABASE)&#10;        cursor = connection.cursor()&#10;        try:&#10;            cursor.executemany(&#10;                'INSERT INTO auth_user '&#10;                '(`id`, `username`, `email`, `is_staff`, `password`, `is_superuser`, '&#10;                '`first_name`, `last_name`, `is_active`, `date_joined`) '&#10;                'VALUES (?, ?, ?, ?, &quot;&quot;, 0, &quot;&quot;, &quot;&quot;, 1, datetime())',&#10;                INITIAL_USERS[:len(INITIAL_VACANCIES)]&#10;            )&#10;            cursor.executemany(&#10;                'INSERT INTO vacancy_vacancy (`author_id`, `description`) VALUES (?, ?)',&#10;                INITIAL_VACANCIES&#10;            )&#10;            connection.commit()&#10;&#10;            cursor.execute('SELECT `author_id`, `description` FROM vacancy_vacancy')&#10;            result = cursor.fetchall()&#10;&#10;            for item in INITIAL_VACANCIES:&#10;                if item not in result:&#10;                    return CheckResult.false('Check your Vacancy model')&#10;            return CheckResult.true()&#10;&#10;        except sqlite3.DatabaseError as err:&#10;            return CheckResult.false(str(err))&#10;&#10;    def check_forbid_anonymous_create(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener()&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/home')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the home page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.true()&#10;&#10;        OTHER_OCCUPATION = 'Marketing Coordinator'&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/resume/new',&#10;                data=urllib.parse.urlencode({&#10;                    'description': OTHER_OCCUPATION,&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;            return CheckResult.false('Should not allow anonymous users create resumes')&#10;        except urllib.error.URLError as err:&#10;            if 'Forbidden' not in err.reason:&#10;                return CheckResult.false(f'Wrong response for forbidden requests: {err.reason}')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/resumes')&#10;            if OTHER_OCCUPATION in page:&#10;                return CheckResult.false(&#10;                    f'Resumes page should not contain resumes from anonymous users'&#10;                )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the resumes page.')&#10;&#10;    def check_forbid_to_create_vacancy(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/home')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the home page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.true()&#10;&#10;        OTHER_OCCUPATION = 'Marketing Coordinator'&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/vacancy/new',&#10;                data=urllib.parse.urlencode({&#10;                    'description': OTHER_OCCUPATION,&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;            return CheckResult.false('Should not allow usual users create vacancies')&#10;        except urllib.error.URLError as err:&#10;            if 'Forbidden' not in err.reason:&#10;                return CheckResult.false(f'Wrong response for forbidden requests: {err.reason}')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/vacancies')&#10;            if OTHER_OCCUPATION in page:&#10;                return CheckResult.false(&#10;                    f'Vacancies page should not contain vacancies from usual users'&#10;                )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the vacancies page.')&#10;&#10;    def check_greeting(self) -&gt; CheckResult:&#10;        try:&#10;            main_page = self.read_page(f'http://localhost:{self.port}')&#10;            if 'Welcome to HyperJob!' in main_page:&#10;                return CheckResult.true()&#10;            return CheckResult.false(&#10;                'Main page should contain &quot;Welcome to HyperJob!&quot; line'&#10;            )&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the menu page.'&#10;            )&#10;&#10;    def check_links(self) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}')&#10;            links = re.findall(self.ELEMENT_PATTERN, page)&#10;            for link in (&#10;                '/login',&#10;                '/signup',&#10;                '/vacancies',&#10;                '/resumes',&#10;                '/home',&#10;            ):&#10;                if link not in links:&#10;                    return CheckResult.false(&#10;                        f'Menu page should contain &lt;a&gt; element with href {link}'&#10;                    )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the menu page.'&#10;            )&#10;&#10;    def check_login(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/login')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the login page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.false('Missing csrf_token in the form')&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/login',&#10;                data=urllib.parse.urlencode({&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                    'username': self.USERNAME,&#10;                    'password': self.PASSWORD,&#10;                }).encode()&#10;            )&#10;            if 'login' not in response.url:&#10;                return CheckResult.true()&#10;            return CheckResult.false('Cannot login: problems with form')&#10;        except urllib.error.URLError as err:&#10;            return CheckResult.false(f'Cannot login: {err.reason}')&#10;&#10;    def check_resumes(self) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/resumes')&#10;            for person, resume in zip(INITIAL_USERS[len(INITIAL_VACANCIES):], INITIAL_RESUMES):&#10;                description = f'{person[1]}: {resume[1]}'&#10;                if description not in page:&#10;                    return CheckResult.false(&#10;                        f'Resumes page should contain resumes in form &lt;username&gt;: &lt;description&gt;'&#10;                    )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the resumes page.'&#10;            )&#10;&#10;    def check_signup(self) -&gt; CheckResult:&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar)&#10;        )&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/signup')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the signup page.')&#10;&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.false('Missing csrf_token in the form')&#10;&#10;        try:&#10;            response = opener.open(&#10;                f'http://localhost:{self.port}/signup',&#10;                data=urllib.parse.urlencode({&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                    'username': self.USERNAME,&#10;                    'password1': self.PASSWORD,&#10;                    'password2': self.PASSWORD,&#10;                }).encode()&#10;            )&#10;            if f'login' in response.url:&#10;                return CheckResult.true()&#10;            return CheckResult.false('Cannot signup: problems with form')&#10;        except urllib.error.URLError as err:&#10;            return CheckResult.false(f'Cannot signup: {err.reason}')&#10;&#10;    def check_vacancies(self) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/vacancies')&#10;            for person, vacancy in zip(INITIAL_USERS, INITIAL_VACANCIES):&#10;                description = f'{person[1]}: {vacancy[1]}'&#10;                if description not in page:&#10;                    return CheckResult.false(&#10;                        f'Vacancies page should contain vacancies in form &lt;username&gt;: &lt;description&gt;'&#10;                    )&#10;            return CheckResult.true()&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the vacancies page.'&#10;            )&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/templates/resume/resumes.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/templates/resume/resumes.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Resumes&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    {% for obj in objects %}&#10;    &lt;div&gt;{{obj.author}}: {{obj.description}}&lt;/div&gt;&#10;    {% endfor %}&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/migrations/0001_initial.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/migrations/0001_initial.py" />
                                <option name="text" value="# Generated by Django 2.2 on 2020-07-18 13:50&#10;&#10;from django.conf import settings&#10;from django.db import migrations, models&#10;import django.db.models.deletion&#10;&#10;&#10;class Migration(migrations.Migration):&#10;&#10;    initial = True&#10;&#10;    dependencies = [&#10;        migrations.swappable_dependency(settings.AUTH_USER_MODEL),&#10;    ]&#10;&#10;    operations = [&#10;        migrations.CreateModel(&#10;            name='Vacancy',&#10;            fields=[&#10;                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),&#10;                ('description', models.TextField(max_length=1024)),&#10;                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),&#10;            ],&#10;        ),&#10;    ]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/resume/migrations/0001_initial.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/resume/migrations/0001_initial.py" />
                                <option name="text" value="# Generated by Django 2.2 on 2020-07-18 13:50&#10;&#10;from django.conf import settings&#10;from django.db import migrations, models&#10;import django.db.models.deletion&#10;&#10;&#10;class Migration(migrations.Migration):&#10;&#10;    initial = True&#10;&#10;    dependencies = [&#10;        migrations.swappable_dependency(settings.AUTH_USER_MODEL),&#10;    ]&#10;&#10;    operations = [&#10;        migrations.CreateModel(&#10;            name='Resume',&#10;            fields=[&#10;                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),&#10;                ('description', models.TextField(max_length=1024)),&#10;                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),&#10;            ],&#10;        ),&#10;    ]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/templates/hyperjob/signup.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/templates/hyperjob/signup.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Sign Up&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;form method=&quot;post&quot; action=&quot;signup&quot;&gt;{% csrf_token %}&#10;      &lt;table&gt;{{ form.as_table }}&lt;/table&gt;&#10;      &lt;button type=&quot;submit&quot;&gt;Send&lt;/button&gt;&#10;    &lt;/form&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/vacancy/templates/vacancy/vacancies.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/vacancy/templates/vacancy/vacancies.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Vacancies&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    {% for obj in objects %}&#10;    &lt;div&gt;{{obj.author}}: {{obj.description}}&lt;/div&gt;&#10;    {% endfor %}&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/templates/hyperjob/main.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/hyperjob/templates/hyperjob/main.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Main&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;h2&gt;Welcome to HyperJob!&lt;/h2&gt;&#10;    &lt;div&gt;&lt;a href=&quot;/login&quot;&gt;Login&lt;/a&gt;&lt;/div&gt;&#10;    &lt;div&gt;&lt;a href=&quot;/signup&quot;&gt;Signup&lt;/a&gt;&lt;/div&gt;&#10;    &lt;div&gt;&lt;a href=&quot;/vacancies&quot;&gt;Vacancies&lt;/a&gt;&lt;/div&gt;&#10;    &lt;div&gt;&lt;a href=&quot;/resumes&quot;&gt;Resumes&lt;/a&gt;&lt;/div&gt;&#10;    &lt;div&gt;&lt;a href=&quot;/home&quot;&gt;Home&lt;/a&gt;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/hyperjob/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;from django.views import View&#10;from django.contrib.auth.forms import UserCreationForm, AuthenticationForm&#10;from django.views.generic import CreateView&#10;from django.contrib.auth.views import LoginView&#10;from django.contrib.auth.models import User&#10;&#10;&#10;# Create your views here.&#10;class MainView(View):&#10;    def get(self, request, *args, **kwargs):&#10;        return render(request, 'hyperjob/main.html', {})&#10;&#10;&#10;class MySignupView(CreateView):&#10;    model = User&#10;    form_class = UserCreationForm&#10;    success_url = 'login'&#10;    template_name = 'hyperjob/signup.html'&#10;&#10;&#10;class MyLoginView(LoginView):&#10;    form_class = AuthenticationForm&#10;    template_name = 'hyperjob/login.html'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/templates/hyperjob/login.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hyperjob/hyperjob/templates/hyperjob/login.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Title&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;form method=&quot;post&quot; action=&quot;login&quot;&gt;{% csrf_token %}&#10;      &lt;table&gt;{{ form.as_table }}&lt;/table&gt;&#10;      &lt;button type=&quot;submit&quot;&gt;Login&lt;/button&gt;&#10;    &lt;/form&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hyperjob/hyperjob/templates/hyperjob/home.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hyperjob/hyperjob/templates/hyperjob/home.html" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                  </list>
                </option>
              </FrameworkLesson>
            </list>
          </option>
        </HyperskillCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>